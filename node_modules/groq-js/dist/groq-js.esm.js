class MarkProcessor {
  constructor(string, marks, parseOptions) {
    this.allowBoost = false;
    this.string = string;
    this.marks = marks;
    this.index = 0;
    this.parseOptions = parseOptions;
  }

  hasMark(pos) {
    if (pos === void 0) {
      pos = 0;
    }

    return this.index + pos < this.marks.length;
  }

  getMark(pos) {
    if (pos === void 0) {
      pos = 0;
    }

    return this.marks[this.index + pos];
  }

  shift() {
    this.index += 1;
  }

  process(visitor) {
    var mark = this.marks[this.index];
    this.shift();
    var func = visitor[mark.name];

    if (!func) {
      throw new Error("Unknown handler: " + mark.name);
    }

    return func.call(visitor, this, mark);
  }

  processString() {
    this.shift();
    return this.processStringEnd();
  }

  processStringEnd() {
    var prev = this.marks[this.index - 1];
    var curr = this.marks[this.index];
    this.shift();
    return this.string.slice(prev.position, curr.position);
  }

  slice(len) {
    var pos = this.marks[this.index].position;
    return this.string.slice(pos, pos + len);
  }

}

function _asyncIterator(iterable) {
  var method;

  if (typeof Symbol !== "undefined") {
    if (Symbol.asyncIterator) method = iterable[Symbol.asyncIterator];
    if (method == null && Symbol.iterator) method = iterable[Symbol.iterator];
  }

  if (method == null) method = iterable["@@asyncIterator"];
  if (method == null) method = iterable["@@iterator"];
  if (method == null) throw new TypeError("Object is not async iterable");
  return method.call(iterable);
}

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume(key === "return" ? "return" : "next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

_AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
};

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function _wrapAsyncGenerator(fn) {
  return function () {
    return new _AsyncGenerator(fn.apply(this, arguments));
  };
}

function _awaitAsyncGenerator(value) {
  return new _AwaitValue(value);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

class StaticValue {
  constructor(data, type) {
    this.data = data;
    this.type = type;
  }

  isArray() {
    return this.type === 'array';
  } // eslint-disable-next-line require-await


  get() {
    var _this = this;

    return _asyncToGenerator(function* () {
      return _this.data;
    })();
  }

  [Symbol.asyncIterator]() {
    if (Array.isArray(this.data)) {
      return function* (data) {
        for (var _iterator = _createForOfIteratorHelperLoose(data), _step; !(_step = _iterator()).done;) {
          var element = _step.value;
          yield fromJS(element);
        }
      }(this.data);
    }

    throw new Error("Cannot iterate over: " + this.type);
  }

}

class DateTime {
  constructor(date) {
    this.date = date;
  }

  static parseToValue(str) {
    var date = parseRFC3339(str);

    if (date) {
      return new StaticValue(new DateTime(date), 'datetime');
    }

    return NULL_VALUE;
  }

  equals(other) {
    return this.date.getTime() == other.date.getTime();
  }

  add(secs) {
    var copy = new Date(this.date.getTime());
    copy.setTime(copy.getTime() + secs * 1000);
    return new DateTime(copy);
  }

  difference(other) {
    return (this.date.getTime() - other.date.getTime()) / 1000;
  }

  compareTo(other) {
    return this.date.getTime() - other.date.getTime();
  }

  toString() {
    return formatRFC3339(this.date);
  }

  toJSON() {
    return this.toString();
  }

}
var RFC3339_REGEX = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|([-+]\d{2}:\d{2}))$/;
function parseRFC3339(str) {
  if (RFC3339_REGEX.test(str)) {
    return new Date(str);
  }

  return null;
}
function formatRFC3339(d) {
  var year = addLeadingZero(d.getUTCFullYear(), 4);
  var month = addLeadingZero(d.getUTCMonth() + 1, 2);
  var day = addLeadingZero(d.getUTCDate(), 2);
  var hour = addLeadingZero(d.getUTCHours(), 2);
  var minute = addLeadingZero(d.getUTCMinutes(), 2);
  var second = addLeadingZero(d.getUTCSeconds(), 2);
  var fractionalSecond = '';
  var millis = d.getMilliseconds();

  if (millis != 0) {
    fractionalSecond = "." + addLeadingZero(millis, 3);
  }

  return year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + fractionalSecond + "Z";
}

function addLeadingZero(num, targetLength) {
  var str = num.toString();

  while (str.length < targetLength) {
    str = "0" + str;
  }

  return str;
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function pathRegExp(pattern) {
  var re = [];

  for (var _iterator = _createForOfIteratorHelperLoose(pattern.split('.')), _step; !(_step = _iterator()).done;) {
    var part = _step.value;

    if (part === '*') {
      re.push('[^.]+');
    } else if (part === '**') {
      re.push('.*');
    } else {
      re.push(escapeRegExp(part));
    }
  }

  return new RegExp("^" + re.join('.') + "$");
}

class Path {
  constructor(pattern) {
    this.pattern = pattern;
    this.patternRe = pathRegExp(pattern);
  }

  matches(str) {
    return this.patternRe.test(str);
  }

  toJSON() {
    return this.pattern;
  }

}

class StreamValue {
  constructor(generator) {
    this.type = 'stream';
    this.generator = generator;
    this.ticker = null;
    this.isDone = false;
    this.data = [];
  } // eslint-disable-next-line class-methods-use-this


  isArray() {
    return true;
  }

  get() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      var result = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(_this2), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          var value = _value;
          result.push(yield value.get());
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    })();
  }

  [Symbol.asyncIterator]() {
    var _this = this;

    return _wrapAsyncGenerator(function* () {
      var i = 0;

      while (true) {
        for (; i < _this.data.length; i++) {
          yield _this.data[i];
        }

        if (_this.isDone) {
          return;
        }

        yield _awaitAsyncGenerator(_this._nextTick());
      }
    })();
  }

  _nextTick() {
    var _this3 = this;

    if (this.ticker) {
      return this.ticker;
    }

    var currentResolver;

    var setupTicker = () => {
      this.ticker = new Promise(resolve => {
        currentResolver = resolve;
      });
    };

    var tick = () => {
      currentResolver();
      setupTicker();
    };

    var fetch = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* () {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;

        var _iteratorError2;

        try {
          for (var _iterator2 = _asyncIterator(_this3.generator()), _step2, _value2; _step2 = yield _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
            var value = _value2;

            _this3.data.push(value);

            tick();
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              yield _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        _this3.isDone = true;
        tick();
      });

      return function fetch() {
        return _ref.apply(this, arguments);
      };
    }();

    setupTicker();
    fetch();
    return this.ticker;
  }

}

var NULL_VALUE = /*#__PURE__*/new StaticValue(null, 'null');
var TRUE_VALUE = /*#__PURE__*/new StaticValue(true, 'boolean');
var FALSE_VALUE = /*#__PURE__*/new StaticValue(false, 'boolean');
function fromNumber(num) {
  if (Number.isFinite(num)) {
    return new StaticValue(num, 'number');
  }

  return NULL_VALUE;
}
function fromString(str) {
  return new StaticValue(str, 'string');
}
function fromDateTime(dt) {
  return new StaticValue(dt, 'datetime');
}
function fromPath(path) {
  return new StaticValue(path, 'path');
}

function isIterator(obj) {
  return obj && typeof obj.next === 'function';
} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


function fromJS(val) {
  if (isIterator(val)) {
    return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(val), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          var value = _value;
          yield fromJS(value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _awaitAsyncGenerator(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }));
  } else if (val === null || val === undefined) {
    return NULL_VALUE;
  }

  return new StaticValue(val, getType(val));
}
/**
 * Returns the type of the value.
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types

function getType(data) {
  if (data === null || typeof data === 'undefined') {
    return 'null';
  }

  if (Array.isArray(data)) {
    return 'array';
  }

  if (data instanceof Path) {
    return 'path';
  }

  if (data instanceof DateTime) {
    return 'datetime';
  }

  return typeof data;
}

var TYPE_ORDER = {
  datetime: 1,
  number: 2,
  string: 3,
  boolean: 4
}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types

function partialCompare(a, b) {
  var aType = getType(a);
  var bType = getType(b);

  if (aType !== bType) {
    return null;
  }

  switch (aType) {
    case 'number':
    case 'boolean':
      return a - b;

    case 'string':
      if (a < b) return -1;
      if (a > b) return 1;
      return 0;

    case 'datetime':
      return a.compareTo(b);

    default:
      return null;
  }
} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types

function totalCompare(a, b) {
  var aType = getType(a);
  var bType = getType(b);
  var aTypeOrder = TYPE_ORDER[aType] || 100;
  var bTypeOrder = TYPE_ORDER[bType] || 100;

  if (aTypeOrder !== bTypeOrder) {
    return aTypeOrder - bTypeOrder;
  }

  var result = partialCompare(a, b);

  if (result === null) {
    result = 0;
  }

  return result;
}

var CHARS = /([^!@#$%^&*(),\\/?";:{}|[\]+<>\s-])+/g;
var CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\/?";:{}|[\]+<>\s-])+/g;
var EDGE_CHARS = /(\b\.+|\.+\b)/g;
var MAX_TERM_LENGTH = 1024;
function matchText(tokens, patterns) {
  if (tokens.length === 0 || patterns.length === 0) {
    return false;
  }

  return patterns.every(pattern => pattern(tokens));
}
function matchTokenize(text) {
  return text.replace(EDGE_CHARS, '').match(CHARS) || [];
}
function matchAnalyzePattern(text) {
  var termsRe = matchPatternRegex(text);
  return termsRe.map(re => tokens => tokens.some(token => re.test(token)));
}
function matchPatternRegex(text) {
  var terms = text.replace(EDGE_CHARS, '').match(CHARS_WITH_WILDCARD) || [];
  return terms.map(term => new RegExp("^" + term.slice(0, MAX_TERM_LENGTH).replace(/\*/g, '.*') + "$", 'i'));
}
function gatherText(_x, _x2) {
  return _gatherText.apply(this, arguments);
}

function _gatherText() {
  _gatherText = _asyncToGenerator(function* (value, cb) {
    if (value.type === 'string') {
      cb(value.data);
      return true;
    }

    if (value.isArray()) {
      var success = true;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(value), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          var part = _value;

          if (part.type === 'string') {
            cb(part.data);
          } else {
            success = false;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return success;
    }

    return false;
  });
  return _gatherText.apply(this, arguments);
}

var BM25k = 1.2;
function evaluateScore(_x, _x2, _x3) {
  return _evaluateScore.apply(this, arguments);
}

function _evaluateScore() {
  _evaluateScore = _asyncToGenerator(function* (node, scope, execute) {
    if (node.type === 'OpCall' && node.op === 'match') {
      return evaluateMatchScore(node.left, node.right, scope, execute);
    }

    if (node.type === 'FuncCall' && node.name === 'boost') {
      var innerScore = yield evaluateScore(node.args[0], scope, execute);
      var boost = yield execute(node.args[1], scope);

      if (boost.type === 'number' && innerScore > 0) {
        return innerScore + boost.data;
      }

      return 0;
    }

    switch (node.type) {
      case 'Or':
        {
          var leftScore = yield evaluateScore(node.left, scope, execute);
          var rightScore = yield evaluateScore(node.right, scope, execute);
          return leftScore + rightScore;
        }

      case 'And':
        {
          var _leftScore = yield evaluateScore(node.left, scope, execute);

          var _rightScore = yield evaluateScore(node.right, scope, execute);

          if (_leftScore === 0 || _rightScore === 0) return 0;
          return _leftScore + _rightScore;
        }

      default:
        {
          var res = yield execute(node, scope);
          return res.type === 'boolean' && res.data === true ? 1 : 0;
        }
    }
  });
  return _evaluateScore.apply(this, arguments);
}

function evaluateMatchScore(_x4, _x5, _x6, _x7) {
  return _evaluateMatchScore.apply(this, arguments);
}

function _evaluateMatchScore() {
  _evaluateMatchScore = _asyncToGenerator(function* (left, right, scope, execute) {
    var text = yield execute(left, scope);
    var pattern = yield execute(right, scope);
    var tokens = [];
    var terms = [];
    yield gatherText(text, part => {
      tokens = tokens.concat(matchTokenize(part));
    });
    var didSucceed = yield gatherText(pattern, part => {
      terms = terms.concat(matchPatternRegex(part));
    });

    if (!didSucceed) {
      return 0;
    }

    if (tokens.length === 0 || terms.length === 0) {
      return 0;
    }

    var score = 0;

    var _loop = function _loop() {
      var re = _step.value;
      var freq = tokens.reduce((c, token) => c + (re.test(token) ? 1 : 0), 0);
      score += freq * (BM25k + 1) / (freq + BM25k);
    };

    for (var _iterator = _createForOfIteratorHelperLoose(terms), _step; !(_step = _iterator()).done;) {
      _loop();
    }

    return score;
  });
  return _evaluateMatchScore.apply(this, arguments);
}

function portableTextContent(_x) {
  return _portableTextContent.apply(this, arguments);
}

function _portableTextContent() {
  _portableTextContent = _asyncToGenerator(function* (value) {
    if (value.type === 'object') {
      return blockText(value.data);
    } else if (value.isArray()) {
      var texts = yield arrayText(value);

      if (texts.length > 0) {
        return texts.join('\n\n');
      }
    }

    return null;
  });
  return _portableTextContent.apply(this, arguments);
}

function arrayText(_x2, _x3) {
  return _arrayText.apply(this, arguments);
}

function _arrayText() {
  _arrayText = _asyncToGenerator(function* (value, result) {
    if (result === void 0) {
      result = [];
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(value), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        var block = _value;

        if (block.type === 'object') {
          var text = blockText(block.data);
          if (text !== null) result.push(text);
        } else if (block.isArray()) {
          yield arrayText(block, result);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  });
  return _arrayText.apply(this, arguments);
}

function blockText(obj) {
  if (typeof obj._type !== 'string') return null;
  var children = obj.children;
  if (!Array.isArray(children)) return null;
  var result = '';

  for (var _iterator2 = _createForOfIteratorHelperLoose(children), _step2; !(_step2 = _iterator2()).done;) {
    var child = _step2.value;

    if (child && typeof child === 'object' && typeof child._type === 'string' && child._type === 'span' && typeof child.text === 'string') {
      result += child.text;
    }
  }

  return result;
}

function hasReference(value, pathSet) {
  switch (getType(value)) {
    case 'array':
      for (var _iterator6 = _createForOfIteratorHelperLoose(value), _step6; !(_step6 = _iterator6()).done;) {
        var v = _step6.value;

        if (hasReference(v, pathSet)) {
          return true;
        }
      }

      break;

    case 'object':
      if (value._ref) {
        return pathSet.has(value._ref);
      }

      for (var _i = 0, _Object$values = Object.values(value); _i < _Object$values.length; _i++) {
        var _v = _Object$values[_i];

        if (hasReference(_v, pathSet)) {
          return true;
        }
      }

      break;
  }

  return false;
}

function countUTF8(str) {
  var count = 0;

  for (var i = 0; i < str.length; i++) {
    var code = str.charCodeAt(i);

    if (code >= 0xd800 && code <= 0xdbff) {
      // High surrogate. Don't count this.
      // By only counting the low surrogate we will correctly
      // count the number of UTF-8 code points.
      continue;
    }

    count++;
  }

  return count;
}

var global = {};

global.coalesce = /*#__PURE__*/function () {
  var _coalesce = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    for (var _iterator7 = _createForOfIteratorHelperLoose(args), _step7; !(_step7 = _iterator7()).done;) {
      var arg = _step7.value;
      var value = yield execute(arg, scope);

      if (value.type !== 'null') {
        return value;
      }
    }

    return NULL_VALUE;
  });

  function coalesce(_x, _x2, _x3) {
    return _coalesce.apply(this, arguments);
  }

  return coalesce;
}();

global.count = /*#__PURE__*/function () {
  var _count = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var inner = yield execute(args[0], scope);

    if (!inner.isArray()) {
      return NULL_VALUE;
    }

    var num = 0; // eslint-disable-next-line @typescript-eslint/no-unused-vars

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(inner), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        var _ = _value;
        num++;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return fromNumber(num);
  });

  function count(_x4, _x5, _x6) {
    return _count.apply(this, arguments);
  }

  return count;
}();

global.count.arity = 1;

global.dateTime = /*#__PURE__*/function () {
  var _dateTime = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var val = yield execute(args[0], scope);

    if (val.type === 'datetime') {
      return val;
    }

    if (val.type !== 'string') {
      return NULL_VALUE;
    }

    return DateTime.parseToValue(val.data);
  });

  function dateTime(_x7, _x8, _x9) {
    return _dateTime.apply(this, arguments);
  }

  return dateTime;
}();

global.dateTime.arity = 1;

global.defined = /*#__PURE__*/function () {
  var _defined = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var inner = yield execute(args[0], scope);
    return inner.type === 'null' ? FALSE_VALUE : TRUE_VALUE;
  });

  function defined(_x10, _x11, _x12) {
    return _defined.apply(this, arguments);
  }

  return defined;
}();

global.defined.arity = 1; // eslint-disable-next-line require-await

global.identity = /*#__PURE__*/function () {
  var _identity = /*#__PURE__*/_asyncToGenerator(function* (args) {
    return fromString('me');
  });

  function identity(_x13) {
    return _identity.apply(this, arguments);
  }

  return identity;
}();

global.identity.arity = 0;

global.length = /*#__PURE__*/function () {
  var _length = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var inner = yield execute(args[0], scope);

    if (inner.type === 'string') {
      return fromNumber(countUTF8(inner.data));
    }

    if (inner.isArray()) {
      var num = 0; // eslint-disable-next-line @typescript-eslint/no-unused-vars

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;

      var _iteratorError2;

      try {
        for (var _iterator2 = _asyncIterator(inner), _step2, _value2; _step2 = yield _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
          var _ = _value2;
          num++;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            yield _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return fromNumber(num);
    }

    return NULL_VALUE;
  });

  function length(_x14, _x15, _x16) {
    return _length.apply(this, arguments);
  }

  return length;
}();

global.length.arity = 1;

global.path = /*#__PURE__*/function () {
  var _path = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var inner = yield execute(args[0], scope);

    if (inner.type !== 'string') {
      return NULL_VALUE;
    }

    return fromPath(new Path(inner.data));
  });

  function path(_x17, _x18, _x19) {
    return _path.apply(this, arguments);
  }

  return path;
}();

global.path.arity = 1;

global.string = /*#__PURE__*/function () {
  var _string = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var value = yield execute(args[0], scope);

    switch (value.type) {
      case 'number':
      case 'string':
      case 'boolean':
      case 'datetime':
        return fromString("" + value.data);

      default:
        return NULL_VALUE;
    }
  });

  function string(_x20, _x21, _x22) {
    return _string.apply(this, arguments);
  }

  return string;
}();

global.string.arity = 1;

global.references = /*#__PURE__*/function () {
  var _references = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var pathSet = new Set();

    for (var _iterator8 = _createForOfIteratorHelperLoose(args), _step8; !(_step8 = _iterator8()).done;) {
      var arg = _step8.value;
      var path = yield execute(arg, scope);

      if (path.type === 'string') {
        pathSet.add(path.data);
      } else if (path.isArray()) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;

        var _iteratorError3;

        try {
          for (var _iterator3 = _asyncIterator(path), _step3, _value3; _step3 = yield _iterator3.next(), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _step3.value, !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
            var elem = _value3;

            if (elem.type === 'string') {
              pathSet.add(elem.data);
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              yield _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }
    }

    if (pathSet.size === 0) {
      return FALSE_VALUE;
    }

    var scopeValue = yield scope.value.get();
    return hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE;
  });

  function references(_x23, _x24, _x25) {
    return _references.apply(this, arguments);
  }

  return references;
}();

global.references.arity = c => c >= 1;

global.round = /*#__PURE__*/function () {
  var _round = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var value = yield execute(args[0], scope);

    if (value.type !== 'number') {
      return NULL_VALUE;
    }

    var num = value.data;
    var prec = 0;

    if (args.length === 2) {
      var precValue = yield execute(args[1], scope);

      if (precValue.type !== 'number' || precValue.data < 0 || !Number.isInteger(precValue.data)) {
        return NULL_VALUE;
      }

      prec = precValue.data;
    }

    if (prec === 0) {
      if (num < 0) {
        // JavaScript's round() function will always rounds towards positive infinity (-3.5 -> -3).
        // The behavior we're interested in is to "round half away from zero".
        return fromNumber(-Math.round(-num));
      }

      return fromNumber(Math.round(num));
    }

    return fromNumber(Number(num.toFixed(prec)));
  });

  function round(_x26, _x27, _x28) {
    return _round.apply(this, arguments);
  }

  return round;
}();

global.round.arity = count => count >= 1 && count <= 2; // eslint-disable-next-line require-await


global.now = /*#__PURE__*/function () {
  var _now = /*#__PURE__*/_asyncToGenerator(function* (args, scope) {
    return fromString(scope.timestamp);
  });

  function now(_x29, _x30) {
    return _now.apply(this, arguments);
  }

  return now;
}();

global.now.arity = 0; // eslint-disable-next-line require-await

global.boost = /*#__PURE__*/function () {
  var _boost = /*#__PURE__*/_asyncToGenerator(function* () {
    // This should be handled by the scoring function.
    throw new Error('unexpected boost call');
  });

  function boost() {
    return _boost.apply(this, arguments);
  }

  return boost;
}();

global.boost.arity = 2;
var string = {};

string.lower = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var value = yield execute(args[0], scope);

    if (value.type !== 'string') {
      return NULL_VALUE;
    }

    return fromString(value.data.toLowerCase());
  });

  return function (_x31, _x32, _x33) {
    return _ref.apply(this, arguments);
  };
}();

string.lower.arity = 1;

string.upper = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var value = yield execute(args[0], scope);

    if (value.type !== 'string') {
      return NULL_VALUE;
    }

    return fromString(value.data.toUpperCase());
  });

  return function (_x34, _x35, _x36) {
    return _ref2.apply(this, arguments);
  };
}();

string.upper.arity = 1;
global.lower = string.lower;
global.upper = string.upper;
var pt = {};

pt.text = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator(function* (args, scope, execute) {
    var value = yield execute(args[0], scope);
    var text = yield portableTextContent(value);

    if (text === null) {
      return NULL_VALUE;
    }

    return fromString(text);
  });

  return function (_x37, _x38, _x39) {
    return _ref3.apply(this, arguments);
  };
}();

pt.text.arity = 1;
var pipeFunctions = {};

pipeFunctions.order = /*#__PURE__*/function () {
  var _order = /*#__PURE__*/_asyncToGenerator(function* (base, args, scope, execute) {
    // eslint-disable-next-line max-len
    // This is a workaround for https://github.com/rpetrich/babel-plugin-transform-async-to-promises/issues/59
    yield true;

    if (!base.isArray()) {
      return NULL_VALUE;
    }

    var mappers = [];
    var directions = [];
    var n = 0;

    for (var _iterator9 = _createForOfIteratorHelperLoose(args), _step9; !(_step9 = _iterator9()).done;) {
      var mapper = _step9.value;
      var direction = 'asc';

      if (mapper.type === 'Desc') {
        direction = 'desc';
        mapper = mapper.base;
      } else if (mapper.type === 'Asc') {
        mapper = mapper.base;
      }

      mappers.push(mapper);
      directions.push(direction);
      n++;
    }

    var aux = [];
    var idx = 0;
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;

    var _iteratorError4;

    try {
      for (var _iterator4 = _asyncIterator(base), _step4, _value4; _step4 = yield _iterator4.next(), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _step4.value, !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
        var value = _value4;
        var newScope = scope.createNested(value);
        var tuple = [yield value.get(), idx];

        for (var i = 0; i < n; i++) {
          var result = yield execute(mappers[i], newScope);
          tuple.push(yield result.get());
        }

        aux.push(tuple);
        idx++;
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          yield _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    aux.sort((aTuple, bTuple) => {
      for (var _i2 = 0; _i2 < n; _i2++) {
        var c = totalCompare(aTuple[_i2 + 2], bTuple[_i2 + 2]);

        if (directions[_i2] === 'desc') {
          c = -c;
        }

        if (c !== 0) {
          return c;
        }
      } // Fallback to sorting on the original index for stable sorting.


      return aTuple[1] - bTuple[1];
    });
    return fromJS(aux.map(v => v[0]));
  });

  function order(_x40, _x41, _x42, _x43) {
    return _order.apply(this, arguments);
  }

  return order;
}();

pipeFunctions.order.arity = count => count >= 1; // eslint-disable-next-line require-await


pipeFunctions.score = /*#__PURE__*/function () {
  var _score = /*#__PURE__*/_asyncToGenerator(function* (base, args, scope, execute) {
    if (!base.isArray()) return NULL_VALUE; // Anything that isn't an object should be sorted first.

    var unknown = [];
    var scored = [];
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;

    var _iteratorError5;

    try {
      for (var _iterator5 = _asyncIterator(base), _step5, _value5; _step5 = yield _iterator5.next(), _iteratorNormalCompletion5 = _step5.done, _value5 = yield _step5.value, !_iteratorNormalCompletion5; _iteratorNormalCompletion5 = true) {
        var value = _value5;

        if (value.type !== 'object') {
          unknown.push(yield value.get());
          continue;
        }

        var newScope = scope.createNested(value);
        var valueScore = typeof value.data._score === 'number' ? value.data._score : 0;

        for (var _iterator10 = _createForOfIteratorHelperLoose(args), _step10; !(_step10 = _iterator10()).done;) {
          var arg = _step10.value;
          valueScore += yield evaluateScore(arg, newScope, execute);
        }

        var newObject = Object.assign({}, value.data, {
          _score: valueScore
        });
        scored.push(newObject);
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          yield _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    scored.sort((a, b) => b._score - a._score);
    return fromJS(scored);
  });

  function score(_x44, _x45, _x46, _x47) {
    return _score.apply(this, arguments);
  }

  return score;
}();

pipeFunctions.score.arity = count => count >= 1;

var namespaces = {
  global,
  string,
  pt
};

function makeTerminalAccept(idx) {
  function accept(step, context, value) {
    var state = $states[idx];
    var key = context.key + idx;
    step.activeSet[key] = {
      state: state,
      context: context,
      value: value
    };
  }

  return accept;
}

function makeTerminalTransition(idx, marks) {
  return makeTransition(marks, makeTerminalAccept(idx));
}

function makeFinalTransition(marks) {
  function accept(step, context, value) {
    step.finalValue = value;
  }

  return makeTransition(marks, accept);
}

function makeTransition(marks, accept) {
  function handler(value, pos) {
    var result = value.slice();

    for (var i = 0; i < marks.length; i++) {
      result.push({
        position: pos,
        name: marks[i]
      });
    }

    return result;
  }

  return {
    handler: handler,
    accept: accept
  };
}

function makeStart(idx, marks) {
  function handler(pos) {
    var result = [];

    for (var i = 0; i < marks.length; i++) {
      result.push({
        position: pos,
        name: marks[i]
      });
    }

    return result;
  }

  return {
    handler: handler,
    accept: makeTerminalAccept(idx)
  };
}

function makeState(idx, transitions, matcher, lastMarks) {
  var lastHandler;

  if (lastMarks) {
    lastHandler = function lastHandler(value, pos) {
      var result = value.slice();

      for (var i = 0; i < lastMarks.length; i++) {
        result.push({
          position: pos,
          name: lastMarks[i]
        });
      }

      return result;
    };
  }

  return {
    key: "s" + idx,
    transitions: transitions,
    matcher: matcher,
    lastHandler: lastHandler
  };
}

function makeCallHandler(value, beforeMarks, afterMarks) {
  return function (beforePos, innerValue, afterPos) {
    var result = value.slice();

    for (var i = 0; i < beforeMarks.length; i++) {
      result.push({
        position: beforePos,
        name: beforeMarks[i]
      });
    }

    result.push.apply(result, innerValue);

    for (var i = 0; i < afterMarks.length; i++) {
      result.push({
        position: afterPos,
        name: afterMarks[i]
      });
    }

    return result;
  };
}

function makeRecCallHandler(beforeMarks, afterMarks) {
  return function (beforePos, innerValue, afterPos) {
    var result = [];

    for (var i = 0; i < beforeMarks.length; i++) {
      result.push({
        position: beforePos,
        name: beforeMarks[i]
      });
    }

    result.push.apply(result, innerValue);

    for (var i = 0; i < afterMarks.length; i++) {
      result.push({
        position: afterPos,
        name: afterMarks[i]
      });
    }

    return result;
  };
}

function newStep(pos) {
  return {
    position: pos,
    contexts: {},
    rules: {},
    activeSet: {}
  };
}

function contextFor(step, ruleIdx) {
  var key = "r" + ruleIdx + "p" + step.position;
  var context = step.contexts[key];

  if (!context) {
    step.contexts[key] = context = {
      key: key,
      position: step.position,
      returnSet: {}
    };
  }

  return context;
}

function startRule(step, ruleIdx) {
  var key = ruleIdx;
  step.rules[key] = $rules[ruleIdx];
}

function startCalls(step) {
  for (var key in step.rules) {
    if (!step.rules.hasOwnProperty(key)) continue;
    var transitions = step.rules[key];
    var context = contextFor(step, key);

    for (var j = 0; j < transitions.length; j++) {
      var t = transitions[j];
      var value = t.handler(step.position);
      t.accept(step, context, value);
    }
  }
}

function combineHandlers(pos, outerHandler, handler) {
  return function combinedHandler(beforePos, childValue, afterPos) {
    var innerValue = handler(beforePos, childValue, afterPos);
    return outerHandler(pos, innerValue, afterPos);
  };
}

function registerTail(context, callerContext, handler) {
  var pos = callerContext.position;
  var returns = callerContext.returnSet;

  for (var key in returns) {
    if (!returns.hasOwnProperty(key)) continue;
    var ret = returns[key];
    var outerHandlers = ret.handlers;

    for (var j = 0; j < outerHandlers.length; j++) {
      var outerHandler = outerHandlers[j];
      var combinedHandler = combineHandlers(pos, outerHandler, handler);
      registerReturn(context, ret.context, ret.state, combinedHandler);
    }
  }
}

function registerReturn(context, contContext, contState, handler) {
  var key = contState.key + contContext.key;
  var value = context.returnSet[key];

  if (!value) {
    value = context.returnSet[key] = {
      state: contState,
      context: contContext,
      handlers: []
    };
  }

  value.handlers.push(handler);
}

function processActivation(activation, step, token, nextToken) {
  var matcher = activation.state.matcher;
  var value = activation.value;
  var didMatch = matcher(token, nextToken);
  if (!didMatch) return;
  var ts = activation.state.transitions;

  for (var i = 0; i < ts.length; i++) {
    var t = ts[i];
    var newValue = t.handler(value, step.position);
    t.accept(step, activation.context, newValue);
  }

  var lastHandler = activation.state.lastHandler;

  if (lastHandler) {
    var innerValue = lastHandler(value, step.position);
    var returns = activation.context.returnSet;

    for (var key in returns) {
      if (!returns.hasOwnProperty(key)) continue;
      var ret = returns[key];
      var handler = ret.handlers[0];
      var retValue = handler(activation.context.position, innerValue, step.position);
      var ts = ret.state.transitions;

      for (var j = 0; j < ts.length; j++) {
        var t = ts[j];
        var newValue = t.handler(retValue, step.position);
        t.accept(step, ret.context, newValue);
      }
    }
  }
}

function parse(str) {
  if (str.length === 0) {
    return  {
      type: 'error',
      position: 0
    };
  }

  var step = newStep(0);
  var initialContext = {
    key: "root",
    position: 0
  };

  for (var i = 0; i < $initial.length; i++) {
    var t = $initial[i];
    var value = t.handler([], 0);
    t.accept(step, initialContext, value);
  }

  startCalls(step);
  var pos = 0;

  while (pos < str.length) {
    var active = step.activeSet;
    var token = str.codePointAt(pos);
    var length = token >= 0xFFFF ? 2 : 1;
    var nextStep = newStep(pos + length);
    var nextPos = pos + length;
    var nextToken = str.codePointAt(nextPos) || 0;
    var isEmpty = true;

    for (var key in active) {
      if (!active.hasOwnProperty(key)) continue;
      var activation = active[key];
      processActivation(activation, nextStep, token, nextToken);
      isEmpty = false;
    }

    if (isEmpty) {
      return {
        type: 'error',
        position: pos - 1
      };
    }

    step = nextStep;
    startCalls(step);
    pos = nextPos;
  }

  if (step.finalValue) {
    return {
      type: 'success',
      marks: step.finalValue
    };
  } else {
    return {
      type: 'error',
      position: str.length
    };
  }
}
var marks0 = [];
var marks1 = ["group"];
var marks2 = ["str_pause"];
var marks3 = ["single_escape"];
var marks4 = ["array"];
var marks5 = ["array_splat"];
var marks6 = ["object"];
var marks7 = ["object_splat_this"];
var marks8 = ["object_splat"];
var marks9 = ["this"];
var marks10 = ["parent"];
var marks11 = ["param"];
var marks12 = ["neg"];
var marks13 = ["pos"];
var marks14 = ["not"];
var marks15 = ["attr_access"];
var marks16 = ["deref"];
var marks17 = ["projection"];
var marks18 = ["slice"];
var marks19 = ["square_bracket"];
var marks20 = ["array_postfix"];
var marks21 = ["integer"];
var marks22 = ["integer_end"];
var marks23 = ["this_attr"];
var marks24 = ["this_attr", "ident"];
var marks25 = ["ident_end"];
var marks26 = ["everything"];
var marks27 = ["pair"];
var marks28 = ["pair", "integer"];
var marks29 = ["pair", "this_attr"];
var marks30 = ["pair", "this_attr", "ident"];
var marks31 = ["pair", "everything"];
var marks32 = ["or"];
var marks33 = ["or", "integer"];
var marks34 = ["or", "this_attr"];
var marks35 = ["or", "this_attr", "ident"];
var marks36 = ["or", "everything"];
var marks37 = ["and"];
var marks38 = ["and", "integer"];
var marks39 = ["and", "this_attr"];
var marks40 = ["and", "this_attr", "ident"];
var marks41 = ["and", "everything"];
var marks42 = ["comp"];
var marks43 = ["comp", "integer"];
var marks44 = ["comp", "this_attr"];
var marks45 = ["comp", "this_attr", "ident"];
var marks46 = ["comp", "everything"];
var marks47 = ["add"];
var marks48 = ["add", "integer"];
var marks49 = ["add", "this_attr"];
var marks50 = ["add", "this_attr", "ident"];
var marks51 = ["add", "everything"];
var marks52 = ["sub"];
var marks53 = ["sub", "integer"];
var marks54 = ["sub", "this_attr"];
var marks55 = ["sub", "this_attr", "ident"];
var marks56 = ["sub", "everything"];
var marks57 = ["mul"];
var marks58 = ["mul", "integer"];
var marks59 = ["mul", "this_attr"];
var marks60 = ["mul", "this_attr", "ident"];
var marks61 = ["mul", "everything"];
var marks62 = ["div"];
var marks63 = ["div", "integer"];
var marks64 = ["div", "this_attr"];
var marks65 = ["div", "this_attr", "ident"];
var marks66 = ["div", "everything"];
var marks67 = ["mod"];
var marks68 = ["mod", "integer"];
var marks69 = ["mod", "this_attr"];
var marks70 = ["mod", "this_attr", "ident"];
var marks71 = ["mod", "everything"];
var marks72 = ["pow"];
var marks73 = ["pow", "integer"];
var marks74 = ["pow", "this_attr"];
var marks75 = ["pow", "this_attr", "ident"];
var marks76 = ["pow", "everything"];
var marks77 = ["pipecall"];
var marks78 = ["pipecall", "integer"];
var marks79 = ["pipecall", "this_attr"];
var marks80 = ["pipecall", "this_attr", "ident"];
var marks81 = ["pipecall", "everything"];
var marks82 = ["sci"];
var marks83 = ["float"];
var marks84 = ["dblparent"];
var marks85 = ["func_call", "namespace"];
var marks86 = ["func_call", "namespace", "ident"];
var marks87 = ["func_call"];
var marks88 = ["func_call", "ident"];
var marks89 = ["traverse"];
var marks90 = ["traverse", "integer"];
var marks91 = ["traverse", "this_attr"];
var marks92 = ["traverse", "this_attr", "ident"];
var marks93 = ["traverse", "everything"];
var marks94 = ["in_range"];
var marks95 = ["in_range", "integer"];
var marks96 = ["in_range", "this_attr"];
var marks97 = ["in_range", "this_attr", "ident"];
var marks98 = ["in_range", "everything"];
var marks99 = ["asc"];
var marks100 = ["asc", "integer"];
var marks101 = ["asc", "this_attr"];
var marks102 = ["asc", "this_attr", "ident"];
var marks103 = ["asc", "everything"];
var marks104 = ["desc"];
var marks105 = ["desc", "integer"];
var marks106 = ["desc", "this_attr"];
var marks107 = ["desc", "this_attr", "ident"];
var marks108 = ["desc", "everything"];
var marks109 = ["op_end"];
var marks110 = ["op"];
var marks111 = ["inc_range"];
var marks112 = ["inc_range", "integer"];
var marks113 = ["inc_range", "this_attr"];
var marks114 = ["inc_range", "this_attr", "ident"];
var marks115 = ["inc_range", "everything"];
var marks116 = ["exc_range"];
var marks117 = ["exc_range", "integer"];
var marks118 = ["exc_range", "this_attr"];
var marks119 = ["exc_range", "this_attr", "ident"];
var marks120 = ["exc_range", "everything"];
var marks121 = ["ident"];
var marks122 = ["func_args_end"];
var marks123 = ["sci_end"];
var marks124 = ["float_end"];
var marks125 = ["str_end"];
var marks126 = ["str"];
var marks127 = ["str", "str_end"];
var marks128 = ["str_start"];
var marks129 = ["unicode_hex_end"];
var marks130 = ["unicode_hex"];
var marks131 = ["array_end"];
var marks132 = ["object_expr"];
var marks133 = ["object_expr", "integer"];
var marks134 = ["object_expr", "this_attr"];
var marks135 = ["object_expr", "this_attr", "ident"];
var marks136 = ["object_expr", "everything"];
var marks137 = ["object_pair"];
var marks138 = ["object_end"];
var marks139 = ["traversal_end"];
var marks140 = ["deref_attr"];

function accept0(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 49);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept1(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 11);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept2(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 39);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept3(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 4);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept4(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 49);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept5(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 39);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept6(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 4);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept7(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 14);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept8(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 15);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept9(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 16);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept10(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 17);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept11(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 5);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept12(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 22);
  var ic1 = contextFor(step, 34);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic1, context, makeCallHandler(value, marks0, marks0));
}

function accept13(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 17);
  var ic1 = contextFor(step, 18);
  var ic2 = contextFor(step, 19);
  var ic3 = contextFor(step, 12);
  var ic4 = contextFor(step, 27);
  var ic5 = contextFor(step, 28);
  var ic6 = contextFor(step, 7);
  var ic7 = contextFor(step, 43);
  var ic8 = contextFor(step, 0);
  var ic9 = contextFor(step, 29);
  var ic10 = contextFor(step, 36);
  var ic11 = contextFor(step, 44);
  var ic12 = contextFor(step, 45);
  var ic13 = contextFor(step, 24);
  var ic14 = contextFor(step, 26);
  var ic15 = contextFor(step, 10);
  var ic16 = contextFor(step, 42);
  var ic17 = contextFor(step, 32);
  var ic18 = contextFor(step, 21);
  var ic19 = contextFor(step, 31);
  var ic20 = contextFor(step, 13);
  registerReturn(ic0, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic1, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic2, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic3, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic4, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic5, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic6, ic0, $states[55], makeRecCallHandler(marks48, marks22));
  registerReturn(ic7, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic8, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic9, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic10, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic11, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic12, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic13, ic0, $states[55], makeRecCallHandler(marks49, marks0));
  registerReturn(ic14, ic0, $states[55], makeRecCallHandler(marks50, marks25));
  registerReturn(ic15, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic16, ic0, $states[55], makeRecCallHandler(marks51, marks0));
  registerReturn(ic17, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic18, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic19, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic20, ic0, $states[55], makeRecCallHandler(marks47, marks0));
  registerReturn(ic0, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic1, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic2, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic3, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic4, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic5, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic6, ic0, $states[60], makeRecCallHandler(marks53, marks22));
  registerReturn(ic7, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic8, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic9, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic10, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic11, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic12, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic13, ic0, $states[60], makeRecCallHandler(marks54, marks0));
  registerReturn(ic14, ic0, $states[60], makeRecCallHandler(marks55, marks25));
  registerReturn(ic15, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic16, ic0, $states[60], makeRecCallHandler(marks56, marks0));
  registerReturn(ic17, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic18, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic19, ic0, $states[60], makeRecCallHandler(marks52, marks0));
  registerReturn(ic20, ic0, $states[60], makeRecCallHandler(marks52, marks0));
}

function accept14(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 18);
  var ic1 = contextFor(step, 19);
  var ic2 = contextFor(step, 12);
  var ic3 = contextFor(step, 27);
  var ic4 = contextFor(step, 28);
  var ic5 = contextFor(step, 7);
  var ic6 = contextFor(step, 43);
  var ic7 = contextFor(step, 0);
  var ic8 = contextFor(step, 29);
  var ic9 = contextFor(step, 36);
  var ic10 = contextFor(step, 44);
  var ic11 = contextFor(step, 45);
  var ic12 = contextFor(step, 24);
  var ic13 = contextFor(step, 26);
  var ic14 = contextFor(step, 10);
  var ic15 = contextFor(step, 42);
  var ic16 = contextFor(step, 32);
  var ic17 = contextFor(step, 21);
  var ic18 = contextFor(step, 31);
  var ic19 = contextFor(step, 13);
  registerReturn(ic0, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic1, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic2, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic3, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic4, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic5, ic0, $states[65], makeRecCallHandler(marks58, marks22));
  registerReturn(ic6, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic7, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic8, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic9, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic10, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic11, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic12, ic0, $states[65], makeRecCallHandler(marks59, marks0));
  registerReturn(ic13, ic0, $states[65], makeRecCallHandler(marks60, marks25));
  registerReturn(ic14, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic15, ic0, $states[65], makeRecCallHandler(marks61, marks0));
  registerReturn(ic16, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic17, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic18, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic19, ic0, $states[65], makeRecCallHandler(marks57, marks0));
  registerReturn(ic0, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic1, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic2, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic3, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic4, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic5, ic0, $states[70], makeRecCallHandler(marks63, marks22));
  registerReturn(ic6, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic7, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic8, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic9, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic10, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic11, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic12, ic0, $states[70], makeRecCallHandler(marks64, marks0));
  registerReturn(ic13, ic0, $states[70], makeRecCallHandler(marks65, marks25));
  registerReturn(ic14, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic15, ic0, $states[70], makeRecCallHandler(marks66, marks0));
  registerReturn(ic16, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic17, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic18, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic19, ic0, $states[70], makeRecCallHandler(marks62, marks0));
  registerReturn(ic0, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic1, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic2, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic3, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic4, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic5, ic0, $states[75], makeRecCallHandler(marks68, marks22));
  registerReturn(ic6, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic7, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic8, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic9, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic10, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic11, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic12, ic0, $states[75], makeRecCallHandler(marks69, marks0));
  registerReturn(ic13, ic0, $states[75], makeRecCallHandler(marks70, marks25));
  registerReturn(ic14, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic15, ic0, $states[75], makeRecCallHandler(marks71, marks0));
  registerReturn(ic16, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic17, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic18, ic0, $states[75], makeRecCallHandler(marks67, marks0));
  registerReturn(ic19, ic0, $states[75], makeRecCallHandler(marks67, marks0));
}

function accept15(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 18);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept16(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 12);
  var ic1 = contextFor(step, 19);
  var ic2 = contextFor(step, 27);
  var ic3 = contextFor(step, 28);
  var ic4 = contextFor(step, 7);
  var ic5 = contextFor(step, 43);
  var ic6 = contextFor(step, 0);
  var ic7 = contextFor(step, 29);
  var ic8 = contextFor(step, 36);
  var ic9 = contextFor(step, 44);
  var ic10 = contextFor(step, 45);
  var ic11 = contextFor(step, 24);
  var ic12 = contextFor(step, 26);
  var ic13 = contextFor(step, 10);
  var ic14 = contextFor(step, 42);
  var ic15 = contextFor(step, 32);
  var ic16 = contextFor(step, 21);
  var ic17 = contextFor(step, 31);
  var ic18 = contextFor(step, 13);
  registerReturn(ic0, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic2, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic3, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic4, ic1, $states[82], makeRecCallHandler(marks73, marks22));
  registerReturn(ic5, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic6, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic7, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic8, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic9, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic10, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic11, ic1, $states[82], makeRecCallHandler(marks74, marks0));
  registerReturn(ic12, ic1, $states[82], makeRecCallHandler(marks75, marks25));
  registerReturn(ic13, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic14, ic1, $states[82], makeRecCallHandler(marks76, marks0));
  registerReturn(ic15, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic16, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic17, ic1, $states[82], makeRecCallHandler(marks72, marks0));
  registerReturn(ic18, ic1, $states[82], makeRecCallHandler(marks72, marks0));
}

function accept17(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 19);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept18(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 42);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept19(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 24);
  var ic1 = contextFor(step, 21);
  var ic2 = contextFor(step, 26);
  registerReturn(ic0, ic1, $states[97], makeRecCallHandler(marks85, marks0));
  registerReturn(ic2, ic1, $states[97], makeRecCallHandler(marks86, marks25));
  registerReturn(ic0, ic1, $states[103], makeRecCallHandler(marks87, marks0));
  registerReturn(ic2, ic1, $states[103], makeRecCallHandler(marks88, marks25));
}

function accept20(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 21);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept21(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 11);
  var ic1 = contextFor(step, 14);
  var ic2 = contextFor(step, 15);
  var ic3 = contextFor(step, 16);
  var ic4 = contextFor(step, 17);
  var ic5 = contextFor(step, 18);
  var ic6 = contextFor(step, 19);
  var ic7 = contextFor(step, 12);
  var ic8 = contextFor(step, 27);
  var ic9 = contextFor(step, 28);
  var ic10 = contextFor(step, 7);
  var ic11 = contextFor(step, 43);
  var ic12 = contextFor(step, 0);
  var ic13 = contextFor(step, 29);
  var ic14 = contextFor(step, 36);
  var ic15 = contextFor(step, 44);
  var ic16 = contextFor(step, 45);
  var ic17 = contextFor(step, 24);
  var ic18 = contextFor(step, 26);
  var ic19 = contextFor(step, 10);
  var ic20 = contextFor(step, 42);
  var ic21 = contextFor(step, 32);
  var ic22 = contextFor(step, 21);
  var ic23 = contextFor(step, 31);
  var ic24 = contextFor(step, 13);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic1, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic2, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic3, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic4, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic5, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic6, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic7, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic8, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic9, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic10, context, state, makeCallHandler(value, marks21, marks22));
  registerReturn(ic11, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic12, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic13, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic14, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic15, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic16, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic17, context, state, makeCallHandler(value, marks23, marks0));
  registerReturn(ic18, context, state, makeCallHandler(value, marks24, marks25));
  registerReturn(ic19, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic20, context, state, makeCallHandler(value, marks26, marks0));
  registerReturn(ic21, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic22, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic23, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic24, context, state, makeCallHandler(value, marks0, marks0));
}

function accept22(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 14);
  var ic1 = contextFor(step, 15);
  var ic2 = contextFor(step, 16);
  var ic3 = contextFor(step, 17);
  var ic4 = contextFor(step, 18);
  var ic5 = contextFor(step, 19);
  var ic6 = contextFor(step, 12);
  var ic7 = contextFor(step, 27);
  var ic8 = contextFor(step, 28);
  var ic9 = contextFor(step, 7);
  var ic10 = contextFor(step, 43);
  var ic11 = contextFor(step, 0);
  var ic12 = contextFor(step, 29);
  var ic13 = contextFor(step, 36);
  var ic14 = contextFor(step, 44);
  var ic15 = contextFor(step, 45);
  var ic16 = contextFor(step, 24);
  var ic17 = contextFor(step, 26);
  var ic18 = contextFor(step, 10);
  var ic19 = contextFor(step, 42);
  var ic20 = contextFor(step, 32);
  var ic21 = contextFor(step, 21);
  var ic22 = contextFor(step, 31);
  var ic23 = contextFor(step, 13);
  registerReturn(ic0, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic1, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic2, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic3, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic4, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic5, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic6, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic7, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic8, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic9, ic0, $states[22], makeRecCallHandler(marks33, marks22));
  registerReturn(ic10, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic11, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic12, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic13, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic14, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic15, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic16, ic0, $states[22], makeRecCallHandler(marks34, marks0));
  registerReturn(ic17, ic0, $states[22], makeRecCallHandler(marks35, marks25));
  registerReturn(ic18, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic19, ic0, $states[22], makeRecCallHandler(marks36, marks0));
  registerReturn(ic20, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic21, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic22, ic0, $states[22], makeRecCallHandler(marks32, marks0));
  registerReturn(ic23, ic0, $states[22], makeRecCallHandler(marks32, marks0));
}

function accept23(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 15);
  var ic1 = contextFor(step, 16);
  var ic2 = contextFor(step, 17);
  var ic3 = contextFor(step, 18);
  var ic4 = contextFor(step, 19);
  var ic5 = contextFor(step, 12);
  var ic6 = contextFor(step, 27);
  var ic7 = contextFor(step, 28);
  var ic8 = contextFor(step, 7);
  var ic9 = contextFor(step, 43);
  var ic10 = contextFor(step, 0);
  var ic11 = contextFor(step, 29);
  var ic12 = contextFor(step, 36);
  var ic13 = contextFor(step, 44);
  var ic14 = contextFor(step, 45);
  var ic15 = contextFor(step, 24);
  var ic16 = contextFor(step, 26);
  var ic17 = contextFor(step, 10);
  var ic18 = contextFor(step, 42);
  var ic19 = contextFor(step, 32);
  var ic20 = contextFor(step, 21);
  var ic21 = contextFor(step, 31);
  var ic22 = contextFor(step, 13);
  registerReturn(ic0, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic1, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic2, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic3, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic4, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic5, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic6, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic7, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic8, ic0, $states[28], makeRecCallHandler(marks38, marks22));
  registerReturn(ic9, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic10, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic11, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic12, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic13, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic14, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic15, ic0, $states[28], makeRecCallHandler(marks39, marks0));
  registerReturn(ic16, ic0, $states[28], makeRecCallHandler(marks40, marks25));
  registerReturn(ic17, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic18, ic0, $states[28], makeRecCallHandler(marks41, marks0));
  registerReturn(ic19, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic20, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic21, ic0, $states[28], makeRecCallHandler(marks37, marks0));
  registerReturn(ic22, ic0, $states[28], makeRecCallHandler(marks37, marks0));
}

function accept24(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 17);
  var ic1 = contextFor(step, 16);
  var ic2 = contextFor(step, 18);
  var ic3 = contextFor(step, 19);
  var ic4 = contextFor(step, 12);
  var ic5 = contextFor(step, 27);
  var ic6 = contextFor(step, 28);
  var ic7 = contextFor(step, 7);
  var ic8 = contextFor(step, 43);
  var ic9 = contextFor(step, 0);
  var ic10 = contextFor(step, 29);
  var ic11 = contextFor(step, 36);
  var ic12 = contextFor(step, 44);
  var ic13 = contextFor(step, 45);
  var ic14 = contextFor(step, 24);
  var ic15 = contextFor(step, 26);
  var ic16 = contextFor(step, 10);
  var ic17 = contextFor(step, 42);
  var ic18 = contextFor(step, 32);
  var ic19 = contextFor(step, 21);
  var ic20 = contextFor(step, 31);
  var ic21 = contextFor(step, 13);
  registerReturn(ic0, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic2, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic3, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic4, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic5, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic6, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic7, ic1, $states[33], makeRecCallHandler(marks43, marks22));
  registerReturn(ic8, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic9, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic10, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic11, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic12, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic13, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic14, ic1, $states[33], makeRecCallHandler(marks44, marks0));
  registerReturn(ic15, ic1, $states[33], makeRecCallHandler(marks45, marks25));
  registerReturn(ic16, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic17, ic1, $states[33], makeRecCallHandler(marks46, marks0));
  registerReturn(ic18, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic19, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic20, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic21, ic1, $states[33], makeRecCallHandler(marks42, marks0));
  registerReturn(ic0, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic2, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic3, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic4, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic5, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic6, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic7, ic1, $states[39], makeRecCallHandler(marks95, marks22));
  registerReturn(ic8, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic9, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic10, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic11, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic12, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic13, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic14, ic1, $states[39], makeRecCallHandler(marks96, marks0));
  registerReturn(ic15, ic1, $states[39], makeRecCallHandler(marks97, marks25));
  registerReturn(ic16, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic17, ic1, $states[39], makeRecCallHandler(marks98, marks0));
  registerReturn(ic18, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic19, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic20, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic21, ic1, $states[39], makeRecCallHandler(marks94, marks0));
  registerReturn(ic1, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic0, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic2, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic3, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic4, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic5, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic6, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic7, ic1, $states[44], makeRecCallHandler(marks100, marks22));
  registerReturn(ic8, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic9, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic10, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic11, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic12, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic13, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic14, ic1, $states[44], makeRecCallHandler(marks101, marks0));
  registerReturn(ic15, ic1, $states[44], makeRecCallHandler(marks102, marks25));
  registerReturn(ic16, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic17, ic1, $states[44], makeRecCallHandler(marks103, marks0));
  registerReturn(ic18, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic19, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic20, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic21, ic1, $states[44], makeRecCallHandler(marks99, marks0));
  registerReturn(ic1, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic0, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic2, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic3, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic4, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic5, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic6, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic7, ic1, $states[50], makeRecCallHandler(marks105, marks22));
  registerReturn(ic8, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic9, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic10, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic11, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic12, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic13, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic14, ic1, $states[50], makeRecCallHandler(marks106, marks0));
  registerReturn(ic15, ic1, $states[50], makeRecCallHandler(marks107, marks25));
  registerReturn(ic16, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic17, ic1, $states[50], makeRecCallHandler(marks108, marks0));
  registerReturn(ic18, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic19, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic20, ic1, $states[50], makeRecCallHandler(marks104, marks0));
  registerReturn(ic21, ic1, $states[50], makeRecCallHandler(marks104, marks0));
}

function accept25(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 24);
  var ic1 = contextFor(step, 26);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic1, context, state, makeCallHandler(value, marks121, marks25));
}

function accept26(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 25);
  var ic1 = contextFor(step, 26);
  registerReturn(ic0, ic1, $states[106], makeRecCallHandler(marks0, marks0));
}

function accept27(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 20);
  var ic1 = contextFor(step, 11);
  var ic2 = contextFor(step, 14);
  var ic3 = contextFor(step, 15);
  var ic4 = contextFor(step, 16);
  var ic5 = contextFor(step, 17);
  var ic6 = contextFor(step, 18);
  var ic7 = contextFor(step, 19);
  var ic8 = contextFor(step, 12);
  var ic9 = contextFor(step, 27);
  var ic10 = contextFor(step, 28);
  var ic11 = contextFor(step, 7);
  var ic12 = contextFor(step, 43);
  var ic13 = contextFor(step, 0);
  var ic14 = contextFor(step, 29);
  var ic15 = contextFor(step, 36);
  var ic16 = contextFor(step, 44);
  var ic17 = contextFor(step, 45);
  var ic18 = contextFor(step, 24);
  var ic19 = contextFor(step, 26);
  var ic20 = contextFor(step, 10);
  var ic21 = contextFor(step, 42);
  var ic22 = contextFor(step, 32);
  var ic23 = contextFor(step, 21);
  var ic24 = contextFor(step, 31);
  var ic25 = contextFor(step, 13);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic1, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic2, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic3, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic4, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic5, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic6, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic7, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic8, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic9, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic10, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic11, ic0, $states[114], makeRecCallHandler(marks21, marks22));
  registerReturn(ic12, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic13, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic14, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic15, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic16, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic17, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic18, ic0, $states[114], makeRecCallHandler(marks23, marks0));
  registerReturn(ic19, ic0, $states[114], makeRecCallHandler(marks24, marks25));
  registerReturn(ic20, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic21, ic0, $states[114], makeRecCallHandler(marks26, marks0));
  registerReturn(ic22, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic23, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic24, ic0, $states[114], makeRecCallHandler(marks0, marks0));
  registerReturn(ic25, ic0, $states[114], makeRecCallHandler(marks0, marks0));
}

function accept28(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 7);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept29(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 7);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks123));
}

function accept30(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 35);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept31(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 7);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks124));
}

function accept32(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 7);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks22));
}

function accept33(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 8);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept34(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 41);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept35(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 9);
  var ic1 = contextFor(step, 37);
  var ic2 = contextFor(step, 48);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks128));
  registerTail(ic1, context, makeCallHandler(value, marks0, marks128));
  registerTail(ic2, context, makeCallHandler(value, marks0, marks128));
}

function accept36(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 23);
  var ic1 = contextFor(step, 7);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks129));
  registerTail(ic1, context, makeCallHandler(value, marks0, marks129));
}

function accept37(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 23);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept38(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 1);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept39(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 14);
  var ic1 = contextFor(step, 11);
  var ic2 = contextFor(step, 15);
  var ic3 = contextFor(step, 16);
  var ic4 = contextFor(step, 17);
  var ic5 = contextFor(step, 18);
  var ic6 = contextFor(step, 19);
  var ic7 = contextFor(step, 12);
  var ic8 = contextFor(step, 27);
  var ic9 = contextFor(step, 28);
  var ic10 = contextFor(step, 7);
  var ic11 = contextFor(step, 43);
  var ic12 = contextFor(step, 0);
  var ic13 = contextFor(step, 29);
  var ic14 = contextFor(step, 36);
  var ic15 = contextFor(step, 44);
  var ic16 = contextFor(step, 45);
  var ic17 = contextFor(step, 24);
  var ic18 = contextFor(step, 26);
  var ic19 = contextFor(step, 10);
  var ic20 = contextFor(step, 42);
  var ic21 = contextFor(step, 32);
  var ic22 = contextFor(step, 21);
  var ic23 = contextFor(step, 31);
  var ic24 = contextFor(step, 13);
  registerReturn(ic0, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic2, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic3, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic4, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic5, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic6, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic7, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic8, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic9, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic10, ic1, $states[16], makeRecCallHandler(marks28, marks22));
  registerReturn(ic11, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic12, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic13, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic14, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic15, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic16, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic17, ic1, $states[16], makeRecCallHandler(marks29, marks0));
  registerReturn(ic18, ic1, $states[16], makeRecCallHandler(marks30, marks25));
  registerReturn(ic19, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic20, ic1, $states[16], makeRecCallHandler(marks31, marks0));
  registerReturn(ic21, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic22, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic23, ic1, $states[16], makeRecCallHandler(marks27, marks0));
  registerReturn(ic24, ic1, $states[16], makeRecCallHandler(marks27, marks0));
}

function accept40(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 30);
  var ic1 = contextFor(step, 11);
  var ic2 = contextFor(step, 14);
  var ic3 = contextFor(step, 15);
  var ic4 = contextFor(step, 16);
  var ic5 = contextFor(step, 17);
  var ic6 = contextFor(step, 18);
  var ic7 = contextFor(step, 19);
  var ic8 = contextFor(step, 12);
  var ic9 = contextFor(step, 27);
  var ic10 = contextFor(step, 28);
  var ic11 = contextFor(step, 7);
  var ic12 = contextFor(step, 43);
  var ic13 = contextFor(step, 0);
  var ic14 = contextFor(step, 29);
  var ic15 = contextFor(step, 36);
  var ic16 = contextFor(step, 44);
  var ic17 = contextFor(step, 45);
  var ic18 = contextFor(step, 24);
  var ic19 = contextFor(step, 26);
  var ic20 = contextFor(step, 10);
  var ic21 = contextFor(step, 42);
  var ic22 = contextFor(step, 32);
  var ic23 = contextFor(step, 21);
  var ic24 = contextFor(step, 31);
  var ic25 = contextFor(step, 13);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic1, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic2, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic3, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic4, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic5, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic6, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic7, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic8, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic9, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic10, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic11, context, state, makeCallHandler(value, marks133, marks22));
  registerReturn(ic12, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic13, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic14, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic15, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic16, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic17, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic18, context, state, makeCallHandler(value, marks134, marks0));
  registerReturn(ic19, context, state, makeCallHandler(value, marks135, marks25));
  registerReturn(ic20, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic21, context, state, makeCallHandler(value, marks136, marks0));
  registerReturn(ic22, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic23, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic24, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic25, context, state, makeCallHandler(value, marks132, marks0));
  registerReturn(ic12, ic0, $states[199], makeRecCallHandler(marks137, marks0));
}

function accept41(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 24);
  var ic1 = contextFor(step, 26);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic1, context, makeCallHandler(value, marks121, marks25));
}

function accept42(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 12);
  var ic1 = contextFor(step, 27);
  var ic2 = contextFor(step, 28);
  var ic3 = contextFor(step, 7);
  var ic4 = contextFor(step, 43);
  var ic5 = contextFor(step, 0);
  var ic6 = contextFor(step, 29);
  var ic7 = contextFor(step, 36);
  var ic8 = contextFor(step, 44);
  var ic9 = contextFor(step, 45);
  var ic10 = contextFor(step, 24);
  var ic11 = contextFor(step, 26);
  var ic12 = contextFor(step, 10);
  var ic13 = contextFor(step, 42);
  var ic14 = contextFor(step, 32);
  var ic15 = contextFor(step, 21);
  var ic16 = contextFor(step, 31);
  var ic17 = contextFor(step, 13);
  registerReturn(ic0, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic1, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic2, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic3, ic0, $states[87], makeRecCallHandler(marks78, marks22));
  registerReturn(ic4, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic5, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic6, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic7, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic8, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic9, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic10, ic0, $states[87], makeRecCallHandler(marks79, marks0));
  registerReturn(ic11, ic0, $states[87], makeRecCallHandler(marks80, marks25));
  registerReturn(ic12, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic13, ic0, $states[87], makeRecCallHandler(marks81, marks0));
  registerReturn(ic14, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic15, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic16, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic17, ic0, $states[87], makeRecCallHandler(marks77, marks0));
  registerReturn(ic3, ic2, $states[132], makeRecCallHandler(marks82, marks0));
  registerReturn(ic3, ic2, $states[138], makeRecCallHandler(marks83, marks0));
  registerReturn(ic3, ic2, $states[141], makeRecCallHandler(marks21, marks0));
  registerReturn(ic14, ic14, $states[211], makeRecCallHandler(marks84, marks0));
  registerReturn(ic0, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic1, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic2, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic3, ic17, $states[226], makeRecCallHandler(marks90, marks22));
  registerReturn(ic4, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic5, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic6, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic7, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic8, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic9, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic10, ic17, $states[226], makeRecCallHandler(marks91, marks0));
  registerReturn(ic11, ic17, $states[226], makeRecCallHandler(marks92, marks25));
  registerReturn(ic12, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic13, ic17, $states[226], makeRecCallHandler(marks93, marks0));
  registerReturn(ic14, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic15, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic16, ic17, $states[226], makeRecCallHandler(marks89, marks0));
  registerReturn(ic17, ic17, $states[226], makeRecCallHandler(marks89, marks0));
}

function accept43(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 12);
  var ic1 = contextFor(step, 27);
  var ic2 = contextFor(step, 28);
  var ic3 = contextFor(step, 7);
  var ic4 = contextFor(step, 43);
  var ic5 = contextFor(step, 0);
  var ic6 = contextFor(step, 36);
  var ic7 = contextFor(step, 44);
  var ic8 = contextFor(step, 45);
  var ic9 = contextFor(step, 24);
  var ic10 = contextFor(step, 26);
  var ic11 = contextFor(step, 10);
  var ic12 = contextFor(step, 42);
  var ic13 = contextFor(step, 32);
  var ic14 = contextFor(step, 31);
  var ic15 = contextFor(step, 13);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic1, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic2, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic3, context, makeCallHandler(value, marks21, marks22));
  registerTail(ic4, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic5, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic6, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic7, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic8, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic9, context, makeCallHandler(value, marks23, marks0));
  registerTail(ic10, context, makeCallHandler(value, marks24, marks25));
  registerTail(ic11, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic12, context, makeCallHandler(value, marks26, marks0));
  registerTail(ic13, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic14, context, makeCallHandler(value, marks0, marks0));
  registerTail(ic15, context, makeCallHandler(value, marks0, marks0));
}

function accept44(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 46);
  var ic1 = contextFor(step, 47);
  var ic2 = contextFor(step, 3);
  var ic3 = contextFor(step, 6);
  var ic4 = contextFor(step, 33);
  var ic5 = contextFor(step, 29);
  var ic6 = contextFor(step, 38);
  var ic7 = contextFor(step, 40);
  var ic8 = contextFor(step, 2);
  registerReturn(ic0, ic1, $states[229], makeRecCallHandler(marks0, marks0));
  registerReturn(ic2, ic1, $states[229], makeRecCallHandler(marks0, marks0));
  registerReturn(ic3, ic1, $states[229], makeRecCallHandler(marks0, marks0));
  registerReturn(ic4, ic1, $states[229], makeRecCallHandler(marks0, marks0));
  registerReturn(ic5, ic1, $states[229], makeRecCallHandler(marks17, marks0));
  registerReturn(ic6, ic1, $states[229], makeRecCallHandler(marks0, marks0));
  registerReturn(ic7, ic1, $states[229], makeRecCallHandler(marks0, marks0));
  registerReturn(ic8, ic1, $states[229], makeRecCallHandler(marks0, marks0));
  registerTail(ic1, context, makeCallHandler(value, marks0, marks0));
}

function accept45(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 39);
  var ic1 = contextFor(step, 49);
  var ic2 = contextFor(step, 4);
  registerReturn(ic0, ic1, $states[4], makeRecCallHandler(marks0, marks0));
  registerReturn(ic2, ic1, $states[5], makeRecCallHandler(marks0, marks0));
}

function accept46(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 46);
  var ic1 = contextFor(step, 3);
  var ic2 = contextFor(step, 6);
  var ic3 = contextFor(step, 33);
  var ic4 = contextFor(step, 29);
  var ic5 = contextFor(step, 38);
  var ic6 = contextFor(step, 40);
  var ic7 = contextFor(step, 2);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic1, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic2, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic3, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic4, context, state, makeCallHandler(value, marks17, marks0));
  registerReturn(ic5, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic6, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic7, context, state, makeCallHandler(value, marks0, marks0));
}

function accept47(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 49);
  var ic1 = contextFor(step, 33);
  var ic2 = contextFor(step, 39);
  var ic3 = contextFor(step, 4);
  var ic4 = contextFor(step, 46);
  var ic5 = contextFor(step, 3);
  var ic6 = contextFor(step, 6);
  var ic7 = contextFor(step, 29);
  var ic8 = contextFor(step, 38);
  var ic9 = contextFor(step, 40);
  var ic10 = contextFor(step, 2);
  registerReturn(ic0, ic1, $states[237], makeRecCallHandler(marks17, marks0));
  registerReturn(ic2, ic1, $states[237], makeRecCallHandler(marks17, marks0));
  registerReturn(ic3, ic1, $states[237], makeRecCallHandler(marks17, marks0));
  registerTail(ic4, context, makeCallHandler(value, marks0, marks139));
  registerTail(ic5, context, makeCallHandler(value, marks0, marks139));
  registerTail(ic6, context, makeCallHandler(value, marks0, marks139));
  registerTail(ic1, context, makeCallHandler(value, marks0, marks139));
  registerTail(ic7, context, makeCallHandler(value, marks17, marks139));
  registerTail(ic8, context, makeCallHandler(value, marks0, marks139));
  registerTail(ic9, context, makeCallHandler(value, marks0, marks139));
  registerTail(ic10, context, makeCallHandler(value, marks0, marks139));
}

function accept48(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 29);
  registerTail(ic0, context, makeCallHandler(value, marks0, marks0));
}

function accept49(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 34);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
}

function accept50(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 17);
  var ic1 = contextFor(step, 34);
  var ic2 = contextFor(step, 18);
  var ic3 = contextFor(step, 19);
  var ic4 = contextFor(step, 12);
  var ic5 = contextFor(step, 27);
  var ic6 = contextFor(step, 28);
  var ic7 = contextFor(step, 7);
  var ic8 = contextFor(step, 43);
  var ic9 = contextFor(step, 0);
  var ic10 = contextFor(step, 29);
  var ic11 = contextFor(step, 36);
  var ic12 = contextFor(step, 44);
  var ic13 = contextFor(step, 45);
  var ic14 = contextFor(step, 24);
  var ic15 = contextFor(step, 26);
  var ic16 = contextFor(step, 10);
  var ic17 = contextFor(step, 42);
  var ic18 = contextFor(step, 32);
  var ic19 = contextFor(step, 21);
  var ic20 = contextFor(step, 31);
  var ic21 = contextFor(step, 13);
  registerReturn(ic0, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic2, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic3, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic4, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic5, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic6, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic7, ic1, $states[250], makeRecCallHandler(marks112, marks22));
  registerReturn(ic8, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic9, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic10, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic11, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic12, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic13, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic14, ic1, $states[250], makeRecCallHandler(marks113, marks0));
  registerReturn(ic15, ic1, $states[250], makeRecCallHandler(marks114, marks25));
  registerReturn(ic16, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic17, ic1, $states[250], makeRecCallHandler(marks115, marks0));
  registerReturn(ic18, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic19, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic20, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic21, ic1, $states[250], makeRecCallHandler(marks111, marks0));
  registerReturn(ic0, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic2, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic3, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic4, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic5, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic6, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic7, ic1, $states[257], makeRecCallHandler(marks117, marks22));
  registerReturn(ic8, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic9, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic10, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic11, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic12, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic13, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic14, ic1, $states[257], makeRecCallHandler(marks118, marks0));
  registerReturn(ic15, ic1, $states[257], makeRecCallHandler(marks119, marks25));
  registerReturn(ic16, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic17, ic1, $states[257], makeRecCallHandler(marks120, marks0));
  registerReturn(ic18, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic19, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic20, ic1, $states[257], makeRecCallHandler(marks116, marks0));
  registerReturn(ic21, ic1, $states[257], makeRecCallHandler(marks116, marks0));
}

function accept51(step, context, value, state) {
  // Partition
  var ic0 = contextFor(step, 50);
  var ic1 = contextFor(step, 49);
  var ic2 = contextFor(step, 39);
  var ic3 = contextFor(step, 4);
  var ic4 = contextFor(step, 11);
  var ic5 = contextFor(step, 14);
  var ic6 = contextFor(step, 15);
  var ic7 = contextFor(step, 16);
  var ic8 = contextFor(step, 17);
  var ic9 = contextFor(step, 18);
  var ic10 = contextFor(step, 19);
  var ic11 = contextFor(step, 12);
  var ic12 = contextFor(step, 27);
  var ic13 = contextFor(step, 28);
  var ic14 = contextFor(step, 7);
  var ic15 = contextFor(step, 43);
  var ic16 = contextFor(step, 0);
  var ic17 = contextFor(step, 29);
  var ic18 = contextFor(step, 36);
  var ic19 = contextFor(step, 44);
  var ic20 = contextFor(step, 45);
  var ic21 = contextFor(step, 24);
  var ic22 = contextFor(step, 26);
  var ic23 = contextFor(step, 10);
  var ic24 = contextFor(step, 42);
  var ic25 = contextFor(step, 32);
  var ic26 = contextFor(step, 21);
  var ic27 = contextFor(step, 31);
  var ic28 = contextFor(step, 13);
  registerReturn(ic0, context, state, makeCallHandler(value, marks0, marks0));
  registerReturn(ic1, ic0, $states[3], makeRecCallHandler(marks0, marks0));
  registerReturn(ic2, ic0, $states[3], makeRecCallHandler(marks0, marks0));
  registerReturn(ic3, ic0, $states[3], makeRecCallHandler(marks0, marks0));
  registerReturn(ic4, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic5, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic6, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic7, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic8, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic9, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic10, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic11, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic12, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic13, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic14, ic0, $states[1], makeRecCallHandler(marks21, marks22));
  registerReturn(ic15, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic16, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic17, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic18, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic19, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic20, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic21, ic0, $states[1], makeRecCallHandler(marks23, marks0));
  registerReturn(ic22, ic0, $states[1], makeRecCallHandler(marks24, marks25));
  registerReturn(ic23, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic24, ic0, $states[1], makeRecCallHandler(marks26, marks0));
  registerReturn(ic25, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic26, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic27, ic0, $states[1], makeRecCallHandler(marks0, marks0));
  registerReturn(ic28, ic0, $states[1], makeRecCallHandler(marks0, marks0));
}

function accept52(step, context, value) {
  // Call __1
  accept45(step);
  accept0(step, context, value);
  accept2(step, context, value);
  accept3(step, context, value);
  startRule(step, 4);
  startRule(step, 39);
}

function accept53(step, context, value) {
  // Call EXPR^1_0
  accept21(step, context, value, $states[1]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept1(step, context, value);
  accept7(step, context, value);
  accept8(step, context, value);
  accept9(step, context, value);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept54(step, context, value) {
  // Call SPACE_0
  accept5(step, context, value, $states[4]);
  accept2(step, context, value);
  startRule(step, 39);
}

function accept55(step, context, value) {
  // Call COMMENT_0
  accept6(step, context, value, $states[5]);
  accept3(step, context, value);
  startRule(step, 4);
}

function accept56(step, context, value) {
  // Call __3
  accept4(step, context, value, $states[13]);
  accept5(step, context, value, $states[13]);
  accept6(step, context, value, $states[13]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept57(step, context, value) {
  // Call EXPR^2_1
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept7(step, context, value);
  accept8(step, context, value);
  accept9(step, context, value);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept58(step, context, value) {
  // Call __2
  accept4(step, context, value, $states[15]);
  accept5(step, context, value, $states[15]);
  accept6(step, context, value, $states[15]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept59(step, context, value) {
  // Call __5
  accept4(step, context, value, $states[19]);
  accept5(step, context, value, $states[19]);
  accept6(step, context, value, $states[19]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept60(step, context, value) {
  // Call EXPR^3_0
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept8(step, context, value);
  accept9(step, context, value);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept61(step, context, value) {
  // Call __4
  accept4(step, context, value, $states[21]);
  accept5(step, context, value, $states[21]);
  accept6(step, context, value, $states[21]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept62(step, context, value) {
  // Call __7
  accept4(step, context, value, $states[25]);
  accept5(step, context, value, $states[25]);
  accept6(step, context, value, $states[25]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept63(step, context, value) {
  // Call EXPR^4_0
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept9(step, context, value);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept64(step, context, value) {
  // Call __6
  accept4(step, context, value, $states[27]);
  accept5(step, context, value, $states[27]);
  accept6(step, context, value, $states[27]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept65(step, context, value) {
  // Call EXPR^6_1
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept66(step, context, value) {
  // Call __9
  accept4(step, context, value, $states[29]);
  accept5(step, context, value, $states[29]);
  accept6(step, context, value, $states[29]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept67(step, context, value) {
  // Call COMP_OP_0
  accept11(step, context, value, $states[31]);
  startRule(step, 5);
}

function accept68(step, context, value) {
  // Call __8
  accept4(step, context, value, $states[32]);
  accept5(step, context, value, $states[32]);
  accept6(step, context, value, $states[32]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept69(step, context, value) {
  // Call __11
  accept4(step, context, value, $states[36]);
  accept5(step, context, value, $states[36]);
  accept6(step, context, value, $states[36]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept70(step, context, value) {
  // Call GROUPED_RANGE_0
  accept50(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept12(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 22);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept71(step, context, value) {
  // Call __10
  accept4(step, context, value, $states[38]);
  accept5(step, context, value, $states[38]);
  accept6(step, context, value, $states[38]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept72(step, context, value) {
  // Call __12
  accept4(step, context, value, $states[43]);
  accept5(step, context, value, $states[43]);
  accept6(step, context, value, $states[43]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept73(step, context, value) {
  // Call __13
  accept4(step, context, value, $states[49]);
  accept5(step, context, value, $states[49]);
  accept6(step, context, value, $states[49]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept74(step, context, value) {
  // Call EXPR^7_0
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept75(step, context, value) {
  // Call __15
  accept4(step, context, value, $states[51]);
  accept5(step, context, value, $states[51]);
  accept6(step, context, value, $states[51]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept76(step, context, value) {
  // Call __14
  accept4(step, context, value, $states[54]);
  accept5(step, context, value, $states[54]);
  accept6(step, context, value, $states[54]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept77(step, context, value) {
  // Call EXPR^7_1
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept78(step, context, value) {
  // Call __17
  accept4(step, context, value, $states[56]);
  accept5(step, context, value, $states[56]);
  accept6(step, context, value, $states[56]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept79(step, context, value) {
  // Call __16
  accept4(step, context, value, $states[59]);
  accept5(step, context, value, $states[59]);
  accept6(step, context, value, $states[59]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept80(step, context, value) {
  // Call EXPR^9_0
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept81(step, context, value) {
  // Call __19
  accept4(step, context, value, $states[61]);
  accept5(step, context, value, $states[61]);
  accept6(step, context, value, $states[61]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept82(step, context, value) {
  // Call STAR_0
  accept18(step, context, value, $states[63]);
  startRule(step, 42);
}

function accept83(step, context, value) {
  // Call __18
  accept4(step, context, value, $states[64]);
  accept5(step, context, value, $states[64]);
  accept6(step, context, value, $states[64]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept84(step, context, value) {
  // Call EXPR^9_1
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept85(step, context, value) {
  // Call __21
  accept4(step, context, value, $states[66]);
  accept5(step, context, value, $states[66]);
  accept6(step, context, value, $states[66]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept86(step, context, value) {
  // Call __20
  accept4(step, context, value, $states[69]);
  accept5(step, context, value, $states[69]);
  accept6(step, context, value, $states[69]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept87(step, context, value) {
  // Call EXPR^9_2
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept88(step, context, value) {
  // Call __23
  accept4(step, context, value, $states[71]);
  accept5(step, context, value, $states[71]);
  accept6(step, context, value, $states[71]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept89(step, context, value) {
  // Call __22
  accept4(step, context, value, $states[74]);
  accept5(step, context, value, $states[74]);
  accept6(step, context, value, $states[74]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept90(step, context, value) {
  // Call __25
  accept4(step, context, value, $states[79]);
  accept5(step, context, value, $states[79]);
  accept6(step, context, value, $states[79]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept91(step, context, value) {
  // Call EXPR^9_4
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept92(step, context, value) {
  // Call __24
  accept4(step, context, value, $states[81]);
  accept5(step, context, value, $states[81]);
  accept6(step, context, value, $states[81]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept93(step, context, value) {
  // Call FUNC_CALL_0
  accept19(step);
  accept26(step);
  accept20(step, context, value);
  startRule(step, 25);
  startRule(step, 26);
}

function accept94(step, context, value) {
  // Call __27
  accept4(step, context, value, $states[83]);
  accept5(step, context, value, $states[83]);
  accept6(step, context, value, $states[83]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept95(step, context, value) {
  // Call __26
  accept4(step, context, value, $states[86]);
  accept5(step, context, value, $states[86]);
  accept6(step, context, value, $states[86]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept96(step, context, value) {
  // Call __29
  accept4(step, context, value, $states[88]);
  accept5(step, context, value, $states[88]);
  accept6(step, context, value, $states[88]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept97(step, context, value) {
  // Call EXPR^1_1
  accept21(step, context, value, $states[90]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept98(step, context, value) {
  // Call __28
  accept4(step, context, value, $states[91]);
  accept5(step, context, value, $states[91]);
  accept6(step, context, value, $states[91]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept99(step, context, value) {
  // Call __31
  accept4(step, context, value, $states[95]);
  accept5(step, context, value, $states[95]);
  accept6(step, context, value, $states[95]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept100(step, context, value) {
  // Call IDENT_1
  accept25(step, context, value, $states[103]);
  accept26(step);
  startRule(step, 25);
  startRule(step, 26);
}

function accept101(step, context, value) {
  // Call __30
  accept4(step, context, value, $states[96]);
  accept5(step, context, value, $states[96]);
  accept6(step, context, value, $states[96]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept102(step, context, value) {
  // Call __33
  accept4(step, context, value, $states[98]);
  accept5(step, context, value, $states[98]);
  accept6(step, context, value, $states[98]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept103(step, context, value) {
  // Call FUNC_ARGS_0
  accept27(step, context, value, $states[100]);
  accept21(step, context, value, $states[100]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept104(step, context, value) {
  // Call __32
  accept4(step, context, value, $states[101]);
  accept5(step, context, value, $states[101]);
  accept6(step, context, value, $states[101]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept105(step, context, value) {
  // Call __36
  accept4(step, context, value, $states[110]);
  accept5(step, context, value, $states[110]);
  accept6(step, context, value, $states[110]);
  accept45(step);
  accept0(step, context, value);
  accept2(step, context, value);
  accept3(step, context, value);
  startRule(step, 4);
  startRule(step, 39);
}

function accept106(step, context, value) {
  // Call EXPR^1_3
  accept21(step, context, value, $states[109]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept1(step, context, value);
  accept7(step, context, value);
  accept8(step, context, value);
  accept9(step, context, value);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept107(step, context, value) {
  // Call __35
  accept4(step, context, value, $states[111]);
  accept5(step, context, value, $states[111]);
  accept6(step, context, value, $states[111]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept108(step, context, value) {
  // Call __34
  accept4(step, context, value, $states[113]);
  accept5(step, context, value, $states[113]);
  accept6(step, context, value, $states[113]);
  accept45(step);
  accept0(step, context, value);
  accept2(step, context, value);
  accept3(step, context, value);
  startRule(step, 4);
  startRule(step, 39);
}

function accept109(step, context, value) {
  // Call DIGIT_0
  accept28(step, context, value, $states[132]);
  startRule(step, 7);
}

function accept110(step, context, value) {
  // Call DIGIT_1
  accept28(step, context, value, $states[133]);
  startRule(step, 7);
}

function accept111(step, context, value) {
  // Call DIGIT_2
  accept28(step, context, value, $states[135]);
  accept29(step, context, value);
  startRule(step, 7);
}

function accept112(step, context, value) {
  // Call SIGN_0
  accept30(step, context, value, $states[136]);
  startRule(step, 35);
}

function accept113(step, context, value) {
  // Call DIGIT_3
  accept28(step, context, value, $states[138]);
  startRule(step, 7);
}

function accept114(step, context, value) {
  // Call DIGIT_4
  accept28(step, context, value, $states[139]);
  accept31(step, context, value);
  startRule(step, 7);
}

function accept115(step, context, value) {
  // Call DIGIT_5
  accept28(step, context, value, $states[141]);
  accept32(step, context, value);
  startRule(step, 7);
}

function accept116(step, context, value) {
  // Call DSTRING_CHAR_0
  accept33(step, context, value, $states[144]);
  startRule(step, 8);
}

function accept117(step, context, value) {
  // Call SSTRING_CHAR_0
  accept34(step, context, value, $states[147]);
  startRule(step, 41);
}

function accept118(step, context, value) {
  // Call ESCAPE_SEQUENCE_0
  accept35(step, context, value);
  startRule(step, 37);
  startRule(step, 48);
}

function accept119(step, context, value) {
  // Call HEX_DIGIT_3
  accept36(step, context, value);
  startRule(step, 7);
  startRule(step, 23);
}

function accept120(step, context, value) {
  // Call HEX_DIGIT_2
  accept37(step, context, value, $states[154]);
  accept28(step, context, value, $states[154]);
  startRule(step, 7);
  startRule(step, 23);
}

function accept121(step, context, value) {
  // Call HEX_DIGIT_1
  accept37(step, context, value, $states[156]);
  accept28(step, context, value, $states[156]);
  startRule(step, 7);
  startRule(step, 23);
}

function accept122(step, context, value) {
  // Call HEX_DIGIT_0
  accept37(step, context, value, $states[157]);
  accept28(step, context, value, $states[157]);
  startRule(step, 7);
  startRule(step, 23);
}

function accept123(step, context, value) {
  // Call HEX_DIGIT_4
  accept37(step, context, value, $states[161]);
  accept28(step, context, value, $states[161]);
  startRule(step, 7);
  startRule(step, 23);
}

function accept124(step, context, value) {
  // Call ESCAPE_SEQUENCE_1
  accept35(step, context, value);
  startRule(step, 37);
  startRule(step, 48);
}

function accept125(step, context, value) {
  // Call __40
  accept4(step, context, value, $states[169]);
  accept5(step, context, value, $states[169]);
  accept6(step, context, value, $states[169]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept126(step, context, value) {
  // Call ARRAY_ELEMENT_1
  accept38(step, context, value, $states[168]);
  accept21(step, context, value, $states[168]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 1);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept127(step, context, value) {
  // Call __39
  accept4(step, context, value, $states[170]);
  accept5(step, context, value, $states[170]);
  accept6(step, context, value, $states[170]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept128(step, context, value) {
  // Call __41
  accept4(step, context, value, $states[173]);
  accept5(step, context, value, $states[173]);
  accept6(step, context, value, $states[173]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept129(step, context, value) {
  // Call __38
  accept4(step, context, value, $states[174]);
  accept5(step, context, value, $states[174]);
  accept6(step, context, value, $states[174]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept130(step, context, value) {
  // Call ARRAY_ELEMENT_0
  accept38(step, context, value, $states[175]);
  accept21(step, context, value, $states[175]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 1);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept131(step, context, value) {
  // Call __37
  accept4(step, context, value, $states[177]);
  accept5(step, context, value, $states[177]);
  accept6(step, context, value, $states[177]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept132(step, context, value) {
  // Call __42
  accept4(step, context, value, $states[182]);
  accept5(step, context, value, $states[182]);
  accept6(step, context, value, $states[182]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept133(step, context, value) {
  // Call EXPR^1_4
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept1(step, context, value);
  accept7(step, context, value);
  accept8(step, context, value);
  accept9(step, context, value);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept134(step, context, value) {
  // Call __46
  accept4(step, context, value, $states[185]);
  accept5(step, context, value, $states[185]);
  accept6(step, context, value, $states[185]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept135(step, context, value) {
  // Call OBJECT_PAIR_1
  accept40(step, context, value, $states[184]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 30);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept136(step, context, value) {
  // Call __45
  accept4(step, context, value, $states[186]);
  accept5(step, context, value, $states[186]);
  accept6(step, context, value, $states[186]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept137(step, context, value) {
  // Call __47
  accept4(step, context, value, $states[189]);
  accept5(step, context, value, $states[189]);
  accept6(step, context, value, $states[189]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept138(step, context, value) {
  // Call __44
  accept4(step, context, value, $states[190]);
  accept5(step, context, value, $states[190]);
  accept6(step, context, value, $states[190]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept139(step, context, value) {
  // Call OBJECT_PAIR_0
  accept40(step, context, value, $states[191]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 30);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept140(step, context, value) {
  // Call __43
  accept4(step, context, value, $states[193]);
  accept5(step, context, value, $states[193]);
  accept6(step, context, value, $states[193]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept141(step, context, value) {
  // Call EXPR^1_5
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept1(step, context, value);
  accept7(step, context, value);
  accept8(step, context, value);
  accept9(step, context, value);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept142(step, context, value) {
  // Call __49
  accept4(step, context, value, $states[195]);
  accept5(step, context, value, $states[195]);
  accept6(step, context, value, $states[195]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept143(step, context, value) {
  // Call __48
  accept4(step, context, value, $states[198]);
  accept5(step, context, value, $states[198]);
  accept6(step, context, value, $states[198]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept144(step, context, value) {
  // Call __50
  accept4(step, context, value, $states[206]);
  accept5(step, context, value, $states[206]);
  accept6(step, context, value, $states[206]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept145(step, context, value) {
  // Call EXPR^1_7
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept1(step, context, value);
  accept7(step, context, value);
  accept8(step, context, value);
  accept9(step, context, value);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept146(step, context, value) {
  // Call IDENT_3
  accept26(step);
  accept41(step, context, value);
  startRule(step, 25);
  startRule(step, 26);
}

function accept147(step, context, value) {
  // Call EXPR^9_5
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept148(step, context, value) {
  // Call __51
  accept4(step, context, value, $states[215]);
  accept5(step, context, value, $states[215]);
  accept6(step, context, value, $states[215]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept149(step, context, value) {
  // Call EXPR^11_3
  accept42(step);
  accept26(step);
  accept19(step);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept150(step, context, value) {
  // Call __52
  accept4(step, context, value, $states[218]);
  accept5(step, context, value, $states[218]);
  accept6(step, context, value, $states[218]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept151(step, context, value) {
  // Call EXPR^11_4
  accept42(step);
  accept26(step);
  accept19(step);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept152(step, context, value) {
  // Call __53
  accept4(step, context, value, $states[221]);
  accept5(step, context, value, $states[221]);
  accept6(step, context, value, $states[221]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept153(step, context, value) {
  // Call TRAVERSAL_LIST_0
  accept44(step, context, value);
  accept47(step, context, value);
  accept45(step);
  startRule(step, 2);
  startRule(step, 3);
  startRule(step, 4);
  startRule(step, 6);
  startRule(step, 29);
  startRule(step, 33);
  startRule(step, 38);
  startRule(step, 39);
  startRule(step, 40);
}

function accept154(step, context, value) {
  // Call __54
  accept4(step, context, value, $states[224]);
  accept5(step, context, value, $states[224]);
  accept6(step, context, value, $states[224]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept155(step, context, value) {
  // Call TRAVERSAL_1
  accept46(step, context, value, $states[228]);
  accept47(step, context, value);
  accept45(step);
  startRule(step, 2);
  startRule(step, 3);
  startRule(step, 4);
  startRule(step, 6);
  startRule(step, 29);
  startRule(step, 33);
  startRule(step, 38);
  startRule(step, 39);
  startRule(step, 40);
}

function accept156(step, context, value) {
  // Call __55
  accept4(step, context, value, $states[227]);
  accept5(step, context, value, $states[227]);
  accept6(step, context, value, $states[227]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept157(step, context, value) {
  // Call IDENT_4
  accept26(step);
  accept41(step, context, value);
  startRule(step, 25);
  startRule(step, 26);
}

function accept158(step, context, value) {
  // Call __56
  accept4(step, context, value, $states[230]);
  accept5(step, context, value, $states[230]);
  accept6(step, context, value, $states[230]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept159(step, context, value) {
  // Call __57
  accept4(step, context, value, $states[235]);
  accept5(step, context, value, $states[235]);
  accept6(step, context, value, $states[235]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept160(step, context, value) {
  // Call IDENT_5
  accept26(step);
  accept41(step, context, value);
  startRule(step, 25);
  startRule(step, 26);
}

function accept161(step, context, value) {
  // Call OBJECT_1
  accept48(step, context, value);
  startRule(step, 29);
}

function accept162(step, context, value) {
  // Call __58
  accept4(step, context, value, $states[237]);
  accept5(step, context, value, $states[237]);
  accept6(step, context, value, $states[237]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept163(step, context, value) {
  // Call __60
  accept4(step, context, value, $states[240]);
  accept5(step, context, value, $states[240]);
  accept6(step, context, value, $states[240]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept164(step, context, value) {
  // Call RANGE_0
  accept49(step, context, value, $states[242]);
  accept50(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept165(step, context, value) {
  // Call __59
  accept4(step, context, value, $states[243]);
  accept5(step, context, value, $states[243]);
  accept6(step, context, value, $states[243]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept166(step, context, value) {
  // Call __62
  accept4(step, context, value, $states[247]);
  accept5(step, context, value, $states[247]);
  accept6(step, context, value, $states[247]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept167(step, context, value) {
  // Call EXPR^6_7
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept168(step, context, value) {
  // Call __61
  accept4(step, context, value, $states[249]);
  accept5(step, context, value, $states[249]);
  accept6(step, context, value, $states[249]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept169(step, context, value) {
  // Call __64
  accept4(step, context, value, $states[254]);
  accept5(step, context, value, $states[254]);
  accept6(step, context, value, $states[254]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept170(step, context, value) {
  // Call EXPR^6_9
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  accept10(step, context, value);
  accept15(step, context, value);
  accept17(step, context, value);
  accept43(step, context, value);
  accept48(step, context, value);
  accept20(step, context, value);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept171(step, context, value) {
  // Call __63
  accept4(step, context, value, $states[256]);
  accept5(step, context, value, $states[256]);
  accept6(step, context, value, $states[256]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept172(step, context, value) {
  // Call __66
  accept4(step, context, value, $states[258]);
  accept5(step, context, value, $states[258]);
  accept6(step, context, value, $states[258]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept173(step, context, value) {
  // Call EXPR^1_8
  accept21(step, context, value, $states[260]);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept174(step, context, value) {
  // Call __65
  accept4(step, context, value, $states[261]);
  accept5(step, context, value, $states[261]);
  accept6(step, context, value, $states[261]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept175(step, context, value) {
  // Call __67
  accept4(step, context, value, $states[263]);
  accept5(step, context, value, $states[263]);
  accept6(step, context, value, $states[263]);
  accept45(step);
  startRule(step, 4);
  startRule(step, 39);
}

function accept176(step, context, value) {
  // Call RANGE_2
  accept49(step, context, value, $states[266]);
  accept50(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

function accept177(step, context, value) {
  // Call main_0
  accept51(step, context, value, $states[269]);
  accept21(step, context, value, $states[269]);
  accept45(step);
  accept39(step);
  accept22(step);
  accept23(step);
  accept24(step);
  accept13(step);
  accept14(step);
  accept16(step);
  accept42(step);
  accept26(step);
  accept19(step);
  startRule(step, 0);
  startRule(step, 4);
  startRule(step, 7);
  startRule(step, 12);
  startRule(step, 13);
  startRule(step, 25);
  startRule(step, 26);
  startRule(step, 29);
  startRule(step, 31);
  startRule(step, 32);
  startRule(step, 39);
  startRule(step, 42);
  startRule(step, 43);
  startRule(step, 44);
}

var trans0 = [];
var trans1 = [/*#__PURE__*/makeTransition(marks0, accept52)];
var trans2 = [/*#__PURE__*/makeTransition(marks0, accept53)];
var trans3 = [/*#__PURE__*/makeTransition(marks0, accept54), /*#__PURE__*/makeTransition(marks0, accept55)];
var trans4 = [/*#__PURE__*/makeTerminalTransition(8, marks0)];
var trans5 = [/*#__PURE__*/makeTerminalTransition(9, marks0)];
var trans6 = [/*#__PURE__*/makeTerminalTransition(9, marks0), /*#__PURE__*/makeTerminalTransition(10, marks0)];
var trans7 = [/*#__PURE__*/makeTerminalTransition(12, marks0)];
var trans8 = [/*#__PURE__*/makeTransition(marks0, accept56), /*#__PURE__*/makeTransition(marks0, accept57)];
var trans9 = [/*#__PURE__*/makeTransition(marks0, accept57)];
var trans10 = [/*#__PURE__*/makeTerminalTransition(11, marks0)];
var trans11 = [/*#__PURE__*/makeTransition(marks0, accept58), /*#__PURE__*/makeTerminalTransition(11, marks0)];
var trans12 = [/*#__PURE__*/makeTerminalTransition(18, marks0)];
var trans13 = [/*#__PURE__*/makeTransition(marks0, accept59), /*#__PURE__*/makeTransition(marks0, accept60)];
var trans14 = [/*#__PURE__*/makeTransition(marks0, accept60)];
var trans15 = [/*#__PURE__*/makeTerminalTransition(17, marks0)];
var trans16 = [/*#__PURE__*/makeTransition(marks0, accept61), /*#__PURE__*/makeTerminalTransition(17, marks0)];
var trans17 = [/*#__PURE__*/makeTerminalTransition(24, marks0)];
var trans18 = [/*#__PURE__*/makeTransition(marks0, accept62), /*#__PURE__*/makeTransition(marks0, accept63)];
var trans19 = [/*#__PURE__*/makeTransition(marks0, accept63)];
var trans20 = [/*#__PURE__*/makeTerminalTransition(23, marks0)];
var trans21 = [/*#__PURE__*/makeTransition(marks0, accept64), /*#__PURE__*/makeTerminalTransition(23, marks0)];
var trans22 = [/*#__PURE__*/makeTransition(marks0, accept65)];
var trans23 = [/*#__PURE__*/makeTransition(marks109, accept66), /*#__PURE__*/makeTransition(marks109, accept65)];
var trans24 = [/*#__PURE__*/makeTransition(marks110, accept67)];
var trans25 = [/*#__PURE__*/makeTransition(marks0, accept68), /*#__PURE__*/makeTransition(marks110, accept67)];
var trans26 = [/*#__PURE__*/makeTerminalTransition(35, marks0)];
var trans27 = [/*#__PURE__*/makeTransition(marks0, accept69), /*#__PURE__*/makeTransition(marks0, accept70)];
var trans28 = [/*#__PURE__*/makeTransition(marks0, accept70)];
var trans29 = [/*#__PURE__*/makeTerminalTransition(34, marks0)];
var trans30 = [/*#__PURE__*/makeTransition(marks0, accept71), /*#__PURE__*/makeTerminalTransition(34, marks0)];
var trans31 = [/*#__PURE__*/makeTerminalTransition(41, marks0)];
var trans32 = [/*#__PURE__*/makeTerminalTransition(42, marks0)];
var trans33 = [/*#__PURE__*/makeTerminalTransition(40, marks0)];
var trans34 = [/*#__PURE__*/makeTransition(marks0, accept72), /*#__PURE__*/makeTerminalTransition(40, marks0)];
var trans35 = [/*#__PURE__*/makeTerminalTransition(46, marks0)];
var trans36 = [/*#__PURE__*/makeTerminalTransition(47, marks0)];
var trans37 = [/*#__PURE__*/makeTerminalTransition(48, marks0)];
var trans38 = [/*#__PURE__*/makeTerminalTransition(45, marks0)];
var trans39 = [/*#__PURE__*/makeTransition(marks0, accept73), /*#__PURE__*/makeTerminalTransition(45, marks0)];
var trans40 = [/*#__PURE__*/makeTransition(marks0, accept74)];
var trans41 = [/*#__PURE__*/makeTransition(marks0, accept75), /*#__PURE__*/makeTransition(marks0, accept74)];
var trans42 = [/*#__PURE__*/makeTerminalTransition(53, marks0)];
var trans43 = [/*#__PURE__*/makeTransition(marks0, accept76), /*#__PURE__*/makeTerminalTransition(53, marks0)];
var trans44 = [/*#__PURE__*/makeTransition(marks0, accept77)];
var trans45 = [/*#__PURE__*/makeTransition(marks0, accept78), /*#__PURE__*/makeTransition(marks0, accept77)];
var trans46 = [/*#__PURE__*/makeTerminalTransition(58, marks0)];
var trans47 = [/*#__PURE__*/makeTransition(marks0, accept79), /*#__PURE__*/makeTerminalTransition(58, marks0)];
var trans48 = [/*#__PURE__*/makeTransition(marks0, accept80)];
var trans49 = [/*#__PURE__*/makeTransition(marks0, accept81), /*#__PURE__*/makeTransition(marks0, accept80)];
var trans50 = [/*#__PURE__*/makeTransition(marks0, accept82)];
var trans51 = [/*#__PURE__*/makeTransition(marks0, accept83), /*#__PURE__*/makeTransition(marks0, accept82)];
var trans52 = [/*#__PURE__*/makeTransition(marks0, accept84)];
var trans53 = [/*#__PURE__*/makeTransition(marks0, accept85), /*#__PURE__*/makeTransition(marks0, accept84)];
var trans54 = [/*#__PURE__*/makeTerminalTransition(68, marks0)];
var trans55 = [/*#__PURE__*/makeTransition(marks0, accept86), /*#__PURE__*/makeTerminalTransition(68, marks0)];
var trans56 = [/*#__PURE__*/makeTransition(marks0, accept87)];
var trans57 = [/*#__PURE__*/makeTransition(marks0, accept88), /*#__PURE__*/makeTransition(marks0, accept87)];
var trans58 = [/*#__PURE__*/makeTerminalTransition(73, marks0)];
var trans59 = [/*#__PURE__*/makeTransition(marks0, accept89), /*#__PURE__*/makeTerminalTransition(73, marks0)];
var trans60 = [/*#__PURE__*/makeTerminalTransition(78, marks0)];
var trans61 = [/*#__PURE__*/makeTransition(marks0, accept90), /*#__PURE__*/makeTransition(marks0, accept91)];
var trans62 = [/*#__PURE__*/makeTransition(marks0, accept91)];
var trans63 = [/*#__PURE__*/makeTerminalTransition(77, marks0)];
var trans64 = [/*#__PURE__*/makeTransition(marks0, accept92), /*#__PURE__*/makeTerminalTransition(77, marks0)];
var trans65 = [/*#__PURE__*/makeTransition(marks0, accept93)];
var trans66 = [/*#__PURE__*/makeTransition(marks0, accept94), /*#__PURE__*/makeTransition(marks0, accept93)];
var trans67 = [/*#__PURE__*/makeTerminalTransition(85, marks0)];
var trans68 = [/*#__PURE__*/makeTransition(marks0, accept95), /*#__PURE__*/makeTerminalTransition(85, marks0)];
var trans69 = [/*#__PURE__*/makeTerminalTransition(89, marks0)];
var trans70 = [/*#__PURE__*/makeTransition(marks0, accept96), /*#__PURE__*/makeTerminalTransition(89, marks0)];
var trans71 = [/*#__PURE__*/makeTransition(marks0, accept97)];
var trans72 = [/*#__PURE__*/makeTransition(marks0, accept98), /*#__PURE__*/makeTransition(marks0, accept97)];
var trans73 = [/*#__PURE__*/makeTerminalTransition(94, marks0)];
var trans74 = [/*#__PURE__*/makeTransition(marks0, accept99), /*#__PURE__*/makeTransition(marks0, accept100)];
var trans75 = [/*#__PURE__*/makeTransition(marks0, accept100)];
var trans76 = [/*#__PURE__*/makeTerminalTransition(93, marks0)];
var trans77 = [/*#__PURE__*/makeTransition(marks0, accept101), /*#__PURE__*/makeTerminalTransition(93, marks0)];
var trans78 = [/*#__PURE__*/makeTerminalTransition(99, marks0)];
var trans79 = [/*#__PURE__*/makeTransition(marks122, accept102), /*#__PURE__*/makeTerminalTransition(99, marks122)];
var trans80 = [/*#__PURE__*/makeTransition(marks0, accept103), /*#__PURE__*/makeTransition(marks122, accept102), /*#__PURE__*/makeTerminalTransition(99, marks122)];
var trans81 = [/*#__PURE__*/makeTransition(marks0, accept104), /*#__PURE__*/makeTransition(marks0, accept103), /*#__PURE__*/makeTransition(marks122, accept102), /*#__PURE__*/makeTerminalTransition(99, marks122)];
var trans82 = [/*#__PURE__*/makeTerminalTransition(102, marks0)];
var trans83 = [/*#__PURE__*/makeTerminalTransition(104, marks0), /*#__PURE__*/makeTerminalTransition(105, marks0)];
var trans84 = [/*#__PURE__*/makeTransition(marks0, accept105), /*#__PURE__*/makeTerminalTransition(112, marks0)];
var trans85 = [/*#__PURE__*/makeTerminalTransition(112, marks0)];
var trans86 = [/*#__PURE__*/makeTransition(marks0, accept106)];
var trans87 = [/*#__PURE__*/makeTransition(marks0, accept107), /*#__PURE__*/makeTransition(marks0, accept106)];
var trans88 = [/*#__PURE__*/makeTransition(marks0, accept108), /*#__PURE__*/makeTerminalTransition(112, marks0)];
var trans89 = [/*#__PURE__*/makeTerminalTransition(116, marks0)];
var trans90 = [/*#__PURE__*/makeTerminalTransition(118, marks0)];
var trans91 = [/*#__PURE__*/makeTerminalTransition(120, marks0)];
var trans92 = [/*#__PURE__*/makeTerminalTransition(122, marks0)];
var trans93 = [/*#__PURE__*/makeTerminalTransition(124, marks0)];
var trans94 = [/*#__PURE__*/makeTerminalTransition(126, marks0)];
var trans95 = [/*#__PURE__*/makeTerminalTransition(127, marks0)];
var trans96 = [/*#__PURE__*/makeTerminalTransition(128, marks0)];
var trans97 = [/*#__PURE__*/makeTerminalTransition(129, marks0)];
var trans98 = [/*#__PURE__*/makeTransition(marks0, accept109), /*#__PURE__*/makeTerminalTransition(134, marks0), /*#__PURE__*/makeTerminalTransition(137, marks0)];
var trans99 = [/*#__PURE__*/makeTransition(marks0, accept110), /*#__PURE__*/makeTerminalTransition(137, marks0)];
var trans100 = [/*#__PURE__*/makeTransition(marks0, accept110)];
var trans101 = [/*#__PURE__*/makeTransition(marks0, accept111)];
var trans102 = [/*#__PURE__*/makeTransition(marks0, accept112), /*#__PURE__*/makeTransition(marks0, accept111)];
var trans103 = [/*#__PURE__*/makeTransition(marks0, accept113), /*#__PURE__*/makeTerminalTransition(140, marks0)];
var trans104 = [/*#__PURE__*/makeTransition(marks0, accept114)];
var trans105 = [/*#__PURE__*/makeTransition(marks0, accept115)];
var trans106 = [/*#__PURE__*/makeTransition(marks0, accept116), /*#__PURE__*/makeTerminalTransition(145, marks125)];
var trans107 = [/*#__PURE__*/makeTransition(marks126, accept116), /*#__PURE__*/makeTerminalTransition(145, marks127)];
var trans108 = [/*#__PURE__*/makeTransition(marks0, accept117), /*#__PURE__*/makeTerminalTransition(148, marks125)];
var trans109 = [/*#__PURE__*/makeTransition(marks126, accept117), /*#__PURE__*/makeTerminalTransition(148, marks127)];
var trans110 = [/*#__PURE__*/makeTransition(marks0, accept118)];
var trans111 = [/*#__PURE__*/makeTransition(marks0, accept119)];
var trans112 = [/*#__PURE__*/makeTransition(marks0, accept120)];
var trans113 = [/*#__PURE__*/makeTransition(marks0, accept121)];
var trans114 = [/*#__PURE__*/makeTransition(marks130, accept122)];
var trans115 = [/*#__PURE__*/makeTerminalTransition(160, marks0)];
var trans116 = [/*#__PURE__*/makeTransition(marks130, accept123)];
var trans117 = [/*#__PURE__*/makeTransition(marks0, accept123), /*#__PURE__*/makeTerminalTransition(162, marks129)];
var trans118 = [/*#__PURE__*/makeTransition(marks0, accept124)];
var trans119 = [/*#__PURE__*/makeTransition(marks0, accept125), /*#__PURE__*/makeTerminalTransition(171, marks0), /*#__PURE__*/makeTerminalTransition(172, marks0), /*#__PURE__*/makeTerminalTransition(176, marks0)];
var trans120 = [/*#__PURE__*/makeTerminalTransition(171, marks0), /*#__PURE__*/makeTerminalTransition(172, marks0), /*#__PURE__*/makeTerminalTransition(176, marks0)];
var trans121 = [/*#__PURE__*/makeTransition(marks0, accept126)];
var trans122 = [/*#__PURE__*/makeTransition(marks0, accept127), /*#__PURE__*/makeTransition(marks0, accept126)];
var trans123 = [/*#__PURE__*/makeTransition(marks0, accept128), /*#__PURE__*/makeTerminalTransition(176, marks0)];
var trans124 = [/*#__PURE__*/makeTerminalTransition(176, marks0)];
var trans125 = [/*#__PURE__*/makeTransition(marks0, accept129), /*#__PURE__*/makeTerminalTransition(171, marks0), /*#__PURE__*/makeTerminalTransition(172, marks0), /*#__PURE__*/makeTerminalTransition(176, marks0)];
var trans126 = [/*#__PURE__*/makeTransition(marks0, accept130), /*#__PURE__*/makeTerminalTransition(176, marks0)];
var trans127 = [/*#__PURE__*/makeTransition(marks0, accept131), /*#__PURE__*/makeTransition(marks0, accept130), /*#__PURE__*/makeTerminalTransition(176, marks0)];
var trans128 = [/*#__PURE__*/makeTerminalTransition(180, marks0)];
var trans129 = [/*#__PURE__*/makeTerminalTransition(181, marks0)];
var trans130 = [/*#__PURE__*/makeTransition(marks0, accept132), /*#__PURE__*/makeTransition(marks0, accept133)];
var trans131 = [/*#__PURE__*/makeTransition(marks0, accept133)];
var trans132 = [/*#__PURE__*/makeTransition(marks0, accept134), /*#__PURE__*/makeTerminalTransition(187, marks0), /*#__PURE__*/makeTerminalTransition(188, marks0), /*#__PURE__*/makeTerminalTransition(192, marks0)];
var trans133 = [/*#__PURE__*/makeTerminalTransition(187, marks0), /*#__PURE__*/makeTerminalTransition(188, marks0), /*#__PURE__*/makeTerminalTransition(192, marks0)];
var trans134 = [/*#__PURE__*/makeTransition(marks0, accept135)];
var trans135 = [/*#__PURE__*/makeTransition(marks0, accept136), /*#__PURE__*/makeTransition(marks0, accept135)];
var trans136 = [/*#__PURE__*/makeTransition(marks0, accept137), /*#__PURE__*/makeTerminalTransition(192, marks0)];
var trans137 = [/*#__PURE__*/makeTerminalTransition(192, marks0)];
var trans138 = [/*#__PURE__*/makeTransition(marks0, accept138), /*#__PURE__*/makeTerminalTransition(187, marks0), /*#__PURE__*/makeTerminalTransition(188, marks0), /*#__PURE__*/makeTerminalTransition(192, marks0)];
var trans139 = [/*#__PURE__*/makeTransition(marks0, accept139), /*#__PURE__*/makeTerminalTransition(192, marks0)];
var trans140 = [/*#__PURE__*/makeTransition(marks0, accept140), /*#__PURE__*/makeTransition(marks0, accept139), /*#__PURE__*/makeTerminalTransition(192, marks0)];
var trans141 = [/*#__PURE__*/makeTransition(marks0, accept141)];
var trans142 = [/*#__PURE__*/makeTransition(marks0, accept142), /*#__PURE__*/makeTransition(marks0, accept141)];
var trans143 = [/*#__PURE__*/makeTerminalTransition(197, marks0)];
var trans144 = [/*#__PURE__*/makeTransition(marks0, accept143), /*#__PURE__*/makeTerminalTransition(197, marks0)];
var trans145 = [/*#__PURE__*/makeTerminalTransition(201, marks0)];
var trans146 = [/*#__PURE__*/makeTerminalTransition(202, marks0)];
var trans147 = [/*#__PURE__*/makeTerminalTransition(204, marks0)];
var trans148 = [/*#__PURE__*/makeTerminalTransition(205, marks0)];
var trans149 = [/*#__PURE__*/makeTransition(marks0, accept144), /*#__PURE__*/makeTransition(marks0, accept145)];
var trans150 = [/*#__PURE__*/makeTransition(marks0, accept145)];
var trans151 = [/*#__PURE__*/makeTerminalTransition(210, marks0)];
var trans152 = [/*#__PURE__*/makeTerminalTransition(209, marks0)];
var trans153 = [/*#__PURE__*/makeTransition(marks0, accept146)];
var trans154 = [/*#__PURE__*/makeTransition(marks0, accept147)];
var trans155 = [/*#__PURE__*/makeTransition(marks0, accept148), /*#__PURE__*/makeTransition(marks0, accept147)];
var trans156 = [/*#__PURE__*/makeTransition(marks0, accept149)];
var trans157 = [/*#__PURE__*/makeTransition(marks0, accept150), /*#__PURE__*/makeTransition(marks0, accept149)];
var trans158 = [/*#__PURE__*/makeTransition(marks0, accept151)];
var trans159 = [/*#__PURE__*/makeTransition(marks0, accept152), /*#__PURE__*/makeTransition(marks0, accept151)];
var trans160 = [/*#__PURE__*/makeTransition(marks0, accept153)];
var trans161 = [/*#__PURE__*/makeTransition(marks0, accept154), /*#__PURE__*/makeTransition(marks0, accept153)];
var trans162 = [/*#__PURE__*/makeTransition(marks0, accept155)];
var trans163 = [/*#__PURE__*/makeTransition(marks0, accept156), /*#__PURE__*/makeTransition(marks0, accept155)];
var trans164 = [/*#__PURE__*/makeTransition(marks0, accept157)];
var trans165 = [/*#__PURE__*/makeTransition(marks0, accept158), /*#__PURE__*/makeTransition(marks0, accept157)];
var trans166 = [/*#__PURE__*/makeTerminalTransition(234, marks0)];
var trans167 = [/*#__PURE__*/makeTransition(marks0, accept159), /*#__PURE__*/makeTransition(marks140, accept160)];
var trans168 = [/*#__PURE__*/makeTransition(marks140, accept160)];
var trans169 = [/*#__PURE__*/makeTransition(marks0, accept161)];
var trans170 = [/*#__PURE__*/makeTransition(marks0, accept162), /*#__PURE__*/makeTransition(marks0, accept161)];
var trans171 = [/*#__PURE__*/makeTerminalTransition(241, marks0)];
var trans172 = [/*#__PURE__*/makeTransition(marks0, accept163), /*#__PURE__*/makeTerminalTransition(241, marks0)];
var trans173 = [/*#__PURE__*/makeTransition(marks0, accept164)];
var trans174 = [/*#__PURE__*/makeTransition(marks0, accept165), /*#__PURE__*/makeTransition(marks0, accept164)];
var trans175 = [/*#__PURE__*/makeTerminalTransition(246, marks0)];
var trans176 = [/*#__PURE__*/makeTransition(marks0, accept166), /*#__PURE__*/makeTransition(marks0, accept167)];
var trans177 = [/*#__PURE__*/makeTransition(marks0, accept167)];
var trans178 = [/*#__PURE__*/makeTerminalTransition(245, marks0)];
var trans179 = [/*#__PURE__*/makeTransition(marks0, accept168), /*#__PURE__*/makeTerminalTransition(245, marks0)];
var trans180 = [/*#__PURE__*/makeTerminalTransition(252, marks0)];
var trans181 = [/*#__PURE__*/makeTerminalTransition(253, marks0)];
var trans182 = [/*#__PURE__*/makeTransition(marks0, accept169), /*#__PURE__*/makeTransition(marks0, accept170)];
var trans183 = [/*#__PURE__*/makeTransition(marks0, accept170)];
var trans184 = [/*#__PURE__*/makeTerminalTransition(251, marks0)];
var trans185 = [/*#__PURE__*/makeTransition(marks0, accept171), /*#__PURE__*/makeTerminalTransition(251, marks0)];
var trans186 = [/*#__PURE__*/makeTerminalTransition(259, marks0)];
var trans187 = [/*#__PURE__*/makeTransition(marks0, accept172), /*#__PURE__*/makeTerminalTransition(259, marks0)];
var trans188 = [/*#__PURE__*/makeTransition(marks0, accept173)];
var trans189 = [/*#__PURE__*/makeTransition(marks0, accept174), /*#__PURE__*/makeTransition(marks0, accept173)];
var trans190 = [/*#__PURE__*/makeTerminalTransition(264, marks0)];
var trans191 = [/*#__PURE__*/makeTransition(marks0, accept175), /*#__PURE__*/makeTerminalTransition(264, marks0)];
var trans192 = [/*#__PURE__*/makeTerminalTransition(267, marks0)];
var trans193 = [/*#__PURE__*/makeTransition(marks0, accept176)];
var trans194 = [/*#__PURE__*/makeFinalTransition(marks0)];

function term0(t, n) {
  return t == 9 || t == 10 || t == 11 || t == 12 || t == 13 || t == 32 || t == 133 || t == 160;
}

function term1(t, n) {
  return t == 47;
}

function term2(t, n) {
  return t < 10 || t > 10;
}

function term3(t, n) {
  return t == 10;
}

function term4(t, n) {
  return t == 61;
}

function term5(t, n) {
  return t == 62;
}

function term6(t, n) {
  return t == 124;
}

function term7(t, n) {
  return t == 38;
}

function term8(t, n) {
  return t == 105;
}

function term9(t, n) {
  return t == 110 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57);
}

function term10(t, n) {
  return t == 97;
}

function term11(t, n) {
  return t == 115;
}

function term12(t, n) {
  return t == 99;
}

function term13(t, n) {
  return t == 100;
}

function term14(t, n) {
  return t == 101;
}

function term15(t, n) {
  return t == 43;
}

function term16(t, n) {
  return t == 45;
}

function term17(t, n) {
  return t == 37;
}

function term18(t, n) {
  return t == 42 && (n < 42 || n > 42);
}

function term19(t, n) {
  return t == 42;
}

function term20(t, n) {
  return t == 41;
}

function term21(t, n) {
  return t == 40;
}

function term22(t, n) {
  return t == 58;
}

function term23(t, n) {
  return t > 96 && t < 123 || t > 64 && t < 91 || t == 95 || t > 47 && t < 58;
}

function term24(t, n) {
  return t > 96 && t < 123 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57) || t > 64 && t < 91 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57) || t == 95 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57) || t > 47 && t < 58 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57);
}

function term25(t, n) {
  return t > 96 && t < 123 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57) || t > 64 && t < 91 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57) || t == 95 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57);
}

function term26(t, n) {
  return t > 96 && t < 123 || t > 64 && t < 91 || t == 95;
}

function term27(t, n) {
  return t == 44;
}

function term28(t, n) {
  return t == 33;
}

function term29(t, n) {
  return t == 60;
}

function term30(t, n) {
  return t == 109;
}

function term31(t, n) {
  return t == 116;
}

function term32(t, n) {
  return t == 104 && (n < 97 || n > 122) && (n < 65 || n > 90) && (n < 95 || n > 95) && (n < 48 || n > 57);
}

function term33(t, n) {
  return t == 46;
}

function term34(t, n) {
  return t == 101 || t == 69;
}

function term35(t, n) {
  return t > 47 && t < 58;
}

function term36(t, n) {
  return t == 43 || t == 45;
}

function term37(t, n) {
  return t == 34;
}

function term38(t, n) {
  return t == 39;
}

function term39(t, n) {
  return t == 92;
}

function term40(t, n) {
  return (t < 34 || t > 34) && (t < 92 || t > 92);
}

function term41(t, n) {
  return t == 39 || t == 34 || t == 92 || t == 47 || t == 98 || t == 102 || t == 110 || t == 114 || t == 116;
}

function term42(t, n) {
  return t == 117;
}

function term43(t, n) {
  return t == 123;
}

function term44(t, n) {
  return t == 125;
}

function term45(t, n) {
  return t > 96 && t < 103;
}

function term46(t, n) {
  return t > 64 && t < 71;
}

function term47(t, n) {
  return (t < 39 || t > 39) && (t < 92 || t > 92);
}

function term48(t, n) {
  return t == 93;
}

function term49(t, n) {
  return t == 91;
}

function term50(t, n) {
  return t == 64;
}

function term51(t, n) {
  return t == 94;
}

function term52(t, n) {
  return t == 36;
}

var $rules = [[/*#__PURE__*/makeStart(178, marks4)], [/*#__PURE__*/makeStart(179, marks5)], [/*#__PURE__*/makeStart(265, marks20)], [/*#__PURE__*/makeStart(232, marks15)], [/*#__PURE__*/makeStart(7, marks0)], [/*#__PURE__*/makeStart(115, marks0), /*#__PURE__*/makeStart(117, marks0), /*#__PURE__*/makeStart(119, marks0), /*#__PURE__*/makeStart(130, marks0), /*#__PURE__*/makeStart(121, marks0), /*#__PURE__*/makeStart(131, marks0), /*#__PURE__*/makeStart(123, marks0), /*#__PURE__*/makeStart(125, marks0)], [/*#__PURE__*/makeStart(233, marks16)], [/*#__PURE__*/makeStart(142, marks0)], [/*#__PURE__*/makeStart(150, marks2), /*#__PURE__*/makeStart(152, marks0)], [], [], [], [/*#__PURE__*/makeStart(92, marks1)], [/*#__PURE__*/makeStart(217, marks12), /*#__PURE__*/makeStart(220, marks13), /*#__PURE__*/makeStart(223, marks14)], [], [], [], [], [], [], [], [], [/*#__PURE__*/makeStart(268, marks0)], [/*#__PURE__*/makeStart(163, marks0), /*#__PURE__*/makeStart(164, marks0)], [], [/*#__PURE__*/makeStart(108, marks0)], [/*#__PURE__*/makeStart(107, marks0)], [], [], [/*#__PURE__*/makeStart(194, marks6)], [/*#__PURE__*/makeStart(200, marks7), /*#__PURE__*/makeStart(203, marks8)], [/*#__PURE__*/makeStart(213, marks11)], [/*#__PURE__*/makeStart(212, marks10)], [/*#__PURE__*/makeStart(239, marks17)], [], [/*#__PURE__*/makeStart(143, marks0)], [], [/*#__PURE__*/makeStart(153, marks3)], [/*#__PURE__*/makeStart(244, marks18)], [/*#__PURE__*/makeStart(6, marks0)], [/*#__PURE__*/makeStart(262, marks19)], [/*#__PURE__*/makeStart(165, marks2), /*#__PURE__*/makeStart(167, marks0)], [/*#__PURE__*/makeStart(76, marks0)], [/*#__PURE__*/makeStart(146, marks0), /*#__PURE__*/makeStart(149, marks0)], [/*#__PURE__*/makeStart(208, marks9)], [], [], [], [/*#__PURE__*/makeStart(158, marks0), /*#__PURE__*/makeStart(159, marks0)], [], []];
var $states = [/*#__PURE__*/makeState(0, []), /*#__PURE__*/makeState(1, trans1), /*#__PURE__*/makeState(2, trans0), /*#__PURE__*/makeState(3, trans2), /*#__PURE__*/makeState(4, trans3), /*#__PURE__*/makeState(5, trans3), /*#__PURE__*/makeState(6, trans0, term0, marks0), /*#__PURE__*/makeState(7, trans4, term1, null), /*#__PURE__*/makeState(8, trans5, term1, null), /*#__PURE__*/makeState(9, trans6, term2, null), /*#__PURE__*/makeState(10, trans0, term3, marks0), /*#__PURE__*/makeState(11, trans7, term4, null), /*#__PURE__*/makeState(12, trans8, term5, null), /*#__PURE__*/makeState(13, trans9), /*#__PURE__*/makeState(14, trans0), /*#__PURE__*/makeState(15, trans10), /*#__PURE__*/makeState(16, trans11), /*#__PURE__*/makeState(17, trans12, term6, null), /*#__PURE__*/makeState(18, trans13, term6, null), /*#__PURE__*/makeState(19, trans14), /*#__PURE__*/makeState(20, trans0), /*#__PURE__*/makeState(21, trans15), /*#__PURE__*/makeState(22, trans16), /*#__PURE__*/makeState(23, trans17, term7, null), /*#__PURE__*/makeState(24, trans18, term7, null), /*#__PURE__*/makeState(25, trans19), /*#__PURE__*/makeState(26, trans0), /*#__PURE__*/makeState(27, trans20), /*#__PURE__*/makeState(28, trans21), /*#__PURE__*/makeState(29, trans22), /*#__PURE__*/makeState(30, trans0), /*#__PURE__*/makeState(31, trans23), /*#__PURE__*/makeState(32, trans24), /*#__PURE__*/makeState(33, trans25), /*#__PURE__*/makeState(34, trans26, term8, null), /*#__PURE__*/makeState(35, trans27, term9, null), /*#__PURE__*/makeState(36, trans28), /*#__PURE__*/makeState(37, trans0), /*#__PURE__*/makeState(38, trans29), /*#__PURE__*/makeState(39, trans30), /*#__PURE__*/makeState(40, trans31, term10, null), /*#__PURE__*/makeState(41, trans32, term11, null), /*#__PURE__*/makeState(42, trans0, term12, marks0), /*#__PURE__*/makeState(43, trans33), /*#__PURE__*/makeState(44, trans34), /*#__PURE__*/makeState(45, trans35, term13, null), /*#__PURE__*/makeState(46, trans36, term14, null), /*#__PURE__*/makeState(47, trans37, term11, null), /*#__PURE__*/makeState(48, trans0, term12, marks0), /*#__PURE__*/makeState(49, trans38), /*#__PURE__*/makeState(50, trans39), /*#__PURE__*/makeState(51, trans40), /*#__PURE__*/makeState(52, trans0), /*#__PURE__*/makeState(53, trans41, term15, null), /*#__PURE__*/makeState(54, trans42), /*#__PURE__*/makeState(55, trans43), /*#__PURE__*/makeState(56, trans44), /*#__PURE__*/makeState(57, trans0), /*#__PURE__*/makeState(58, trans45, term16, null), /*#__PURE__*/makeState(59, trans46), /*#__PURE__*/makeState(60, trans47), /*#__PURE__*/makeState(61, trans48), /*#__PURE__*/makeState(62, trans0), /*#__PURE__*/makeState(63, trans49), /*#__PURE__*/makeState(64, trans50), /*#__PURE__*/makeState(65, trans51), /*#__PURE__*/makeState(66, trans52), /*#__PURE__*/makeState(67, trans0), /*#__PURE__*/makeState(68, trans53, term1, null), /*#__PURE__*/makeState(69, trans54), /*#__PURE__*/makeState(70, trans55), /*#__PURE__*/makeState(71, trans56), /*#__PURE__*/makeState(72, trans0), /*#__PURE__*/makeState(73, trans57, term17, null), /*#__PURE__*/makeState(74, trans58), /*#__PURE__*/makeState(75, trans59), /*#__PURE__*/makeState(76, trans0, term18, marks0), /*#__PURE__*/makeState(77, trans60, term19, null), /*#__PURE__*/makeState(78, trans61, term19, null), /*#__PURE__*/makeState(79, trans62), /*#__PURE__*/makeState(80, trans0), /*#__PURE__*/makeState(81, trans63), /*#__PURE__*/makeState(82, trans64), /*#__PURE__*/makeState(83, trans65), /*#__PURE__*/makeState(84, trans0), /*#__PURE__*/makeState(85, trans66, term6, null), /*#__PURE__*/makeState(86, trans67), /*#__PURE__*/makeState(87, trans68), /*#__PURE__*/makeState(88, trans69), /*#__PURE__*/makeState(89, trans0, term20, marks0), /*#__PURE__*/makeState(90, trans70), /*#__PURE__*/makeState(91, trans71), /*#__PURE__*/makeState(92, trans72, term21, null), /*#__PURE__*/makeState(93, trans73, term22, null), /*#__PURE__*/makeState(94, trans74, term22, null), /*#__PURE__*/makeState(95, trans75), /*#__PURE__*/makeState(96, trans76), /*#__PURE__*/makeState(97, trans77), /*#__PURE__*/makeState(98, trans78), /*#__PURE__*/makeState(99, trans0, term20, marks0), /*#__PURE__*/makeState(100, trans79), /*#__PURE__*/makeState(101, trans80), /*#__PURE__*/makeState(102, trans81, term21, null), /*#__PURE__*/makeState(103, trans82), /*#__PURE__*/makeState(104, trans83, term23, null), /*#__PURE__*/makeState(105, trans0, term24, marks0), /*#__PURE__*/makeState(106, trans83), /*#__PURE__*/makeState(107, trans0, term25, marks0), /*#__PURE__*/makeState(108, trans0, term26, marks0), /*#__PURE__*/makeState(109, trans84), /*#__PURE__*/makeState(110, trans85), /*#__PURE__*/makeState(111, trans86), /*#__PURE__*/makeState(112, trans87, term27, null), /*#__PURE__*/makeState(113, trans85), /*#__PURE__*/makeState(114, trans88), /*#__PURE__*/makeState(115, trans89, term4, null), /*#__PURE__*/makeState(116, trans0, term4, marks0), /*#__PURE__*/makeState(117, trans90, term28, null), /*#__PURE__*/makeState(118, trans0, term4, marks0), /*#__PURE__*/makeState(119, trans91, term5, null), /*#__PURE__*/makeState(120, trans0, term4, marks0), /*#__PURE__*/makeState(121, trans92, term29, null), /*#__PURE__*/makeState(122, trans0, term4, marks0), /*#__PURE__*/makeState(123, trans93, term8, null), /*#__PURE__*/makeState(124, trans0, term9, marks0), /*#__PURE__*/makeState(125, trans94, term30, null), /*#__PURE__*/makeState(126, trans95, term10, null), /*#__PURE__*/makeState(127, trans96, term31, null), /*#__PURE__*/makeState(128, trans97, term12, null), /*#__PURE__*/makeState(129, trans0, term32, marks0), /*#__PURE__*/makeState(130, trans0, term5, marks0), /*#__PURE__*/makeState(131, trans0, term29, marks0), /*#__PURE__*/makeState(132, trans98), /*#__PURE__*/makeState(133, trans99), /*#__PURE__*/makeState(134, trans100, term33, null), /*#__PURE__*/makeState(135, trans101), /*#__PURE__*/makeState(136, trans101), /*#__PURE__*/makeState(137, trans102, term34, null), /*#__PURE__*/makeState(138, trans103), /*#__PURE__*/makeState(139, trans104), /*#__PURE__*/makeState(140, trans104, term33, null), /*#__PURE__*/makeState(141, trans105), /*#__PURE__*/makeState(142, trans0, term35, marks0), /*#__PURE__*/makeState(143, trans0, term36, marks0), /*#__PURE__*/makeState(144, trans106), /*#__PURE__*/makeState(145, trans0, term37, marks0), /*#__PURE__*/makeState(146, trans107, term37, null), /*#__PURE__*/makeState(147, trans108), /*#__PURE__*/makeState(148, trans0, term38, marks0), /*#__PURE__*/makeState(149, trans109, term38, null), /*#__PURE__*/makeState(150, trans110, term39, null), /*#__PURE__*/makeState(151, trans0), /*#__PURE__*/makeState(152, trans0, term40, marks0), /*#__PURE__*/makeState(153, trans0, term41, marks0), /*#__PURE__*/makeState(154, trans111), /*#__PURE__*/makeState(155, trans0), /*#__PURE__*/makeState(156, trans112), /*#__PURE__*/makeState(157, trans113), /*#__PURE__*/makeState(158, trans114, term42, null), /*#__PURE__*/makeState(159, trans115, term42, null), /*#__PURE__*/makeState(160, trans116, term43, null), /*#__PURE__*/makeState(161, trans117), /*#__PURE__*/makeState(162, trans0, term44, marks0), /*#__PURE__*/makeState(163, trans0, term45, marks0), /*#__PURE__*/makeState(164, trans0, term46, marks0), /*#__PURE__*/makeState(165, trans118, term39, null), /*#__PURE__*/makeState(166, trans0), /*#__PURE__*/makeState(167, trans0, term47, marks0), /*#__PURE__*/makeState(168, trans119), /*#__PURE__*/makeState(169, trans120), /*#__PURE__*/makeState(170, trans121), /*#__PURE__*/makeState(171, trans122, term27, null), /*#__PURE__*/makeState(172, trans123, term27, null), /*#__PURE__*/makeState(173, trans124), /*#__PURE__*/makeState(174, trans120), /*#__PURE__*/makeState(175, trans125), /*#__PURE__*/makeState(176, trans0, term48, marks131), /*#__PURE__*/makeState(177, trans126), /*#__PURE__*/makeState(178, trans127, term49, null), /*#__PURE__*/makeState(179, trans128, term33, null), /*#__PURE__*/makeState(180, trans129, term33, null), /*#__PURE__*/makeState(181, trans130, term33, null), /*#__PURE__*/makeState(182, trans131), /*#__PURE__*/makeState(183, trans0), /*#__PURE__*/makeState(184, trans132), /*#__PURE__*/makeState(185, trans133), /*#__PURE__*/makeState(186, trans134), /*#__PURE__*/makeState(187, trans135, term27, null), /*#__PURE__*/makeState(188, trans136, term27, null), /*#__PURE__*/makeState(189, trans137), /*#__PURE__*/makeState(190, trans133), /*#__PURE__*/makeState(191, trans138), /*#__PURE__*/makeState(192, trans0, term44, marks138), /*#__PURE__*/makeState(193, trans139), /*#__PURE__*/makeState(194, trans140, term43, null), /*#__PURE__*/makeState(195, trans141), /*#__PURE__*/makeState(196, trans0), /*#__PURE__*/makeState(197, trans142, term22, null), /*#__PURE__*/makeState(198, trans143), /*#__PURE__*/makeState(199, trans144), /*#__PURE__*/makeState(200, trans145, term33, null), /*#__PURE__*/makeState(201, trans146, term33, null), /*#__PURE__*/makeState(202, trans0, term33, marks0), /*#__PURE__*/makeState(203, trans147, term33, null), /*#__PURE__*/makeState(204, trans148, term33, null), /*#__PURE__*/makeState(205, trans149, term33, null), /*#__PURE__*/makeState(206, trans150), /*#__PURE__*/makeState(207, trans0), /*#__PURE__*/makeState(208, trans0, term50, marks0), /*#__PURE__*/makeState(209, trans151, term33, null), /*#__PURE__*/makeState(210, trans0, term51, marks0), /*#__PURE__*/makeState(211, trans152), /*#__PURE__*/makeState(212, trans0, term51, marks0), /*#__PURE__*/makeState(213, trans153, term52, null), /*#__PURE__*/makeState(214, trans0), /*#__PURE__*/makeState(215, trans154), /*#__PURE__*/makeState(216, trans0), /*#__PURE__*/makeState(217, trans155, term16, null), /*#__PURE__*/makeState(218, trans156), /*#__PURE__*/makeState(219, trans0), /*#__PURE__*/makeState(220, trans157, term15, null), /*#__PURE__*/makeState(221, trans158), /*#__PURE__*/makeState(222, trans0), /*#__PURE__*/makeState(223, trans159, term28, null), /*#__PURE__*/makeState(224, trans160), /*#__PURE__*/makeState(225, trans0), /*#__PURE__*/makeState(226, trans161), /*#__PURE__*/makeState(227, trans162), /*#__PURE__*/makeState(228, trans163), /*#__PURE__*/makeState(229, trans163), /*#__PURE__*/makeState(230, trans164), /*#__PURE__*/makeState(231, trans0), /*#__PURE__*/makeState(232, trans165, term33, null), /*#__PURE__*/makeState(233, trans166, term16, null), /*#__PURE__*/makeState(234, trans167, term5, marks0), /*#__PURE__*/makeState(235, trans168), /*#__PURE__*/makeState(236, trans0), /*#__PURE__*/makeState(237, trans169), /*#__PURE__*/makeState(238, trans0), /*#__PURE__*/makeState(239, trans170, term6, null), /*#__PURE__*/makeState(240, trans171), /*#__PURE__*/makeState(241, trans0, term48, marks0), /*#__PURE__*/makeState(242, trans172), /*#__PURE__*/makeState(243, trans173), /*#__PURE__*/makeState(244, trans174, term49, null), /*#__PURE__*/makeState(245, trans175, term33, null), /*#__PURE__*/makeState(246, trans176, term33, null), /*#__PURE__*/makeState(247, trans177), /*#__PURE__*/makeState(248, trans0), /*#__PURE__*/makeState(249, trans178), /*#__PURE__*/makeState(250, trans179), /*#__PURE__*/makeState(251, trans180, term33, null), /*#__PURE__*/makeState(252, trans181, term33, null), /*#__PURE__*/makeState(253, trans182, term33, null), /*#__PURE__*/makeState(254, trans183), /*#__PURE__*/makeState(255, trans0), /*#__PURE__*/makeState(256, trans184), /*#__PURE__*/makeState(257, trans185), /*#__PURE__*/makeState(258, trans186), /*#__PURE__*/makeState(259, trans0, term48, marks0), /*#__PURE__*/makeState(260, trans187), /*#__PURE__*/makeState(261, trans188), /*#__PURE__*/makeState(262, trans189, term49, null), /*#__PURE__*/makeState(263, trans190), /*#__PURE__*/makeState(264, trans0, term48, marks0), /*#__PURE__*/makeState(265, trans191, term49, null), /*#__PURE__*/makeState(266, trans192), /*#__PURE__*/makeState(267, trans0, term20, marks0), /*#__PURE__*/makeState(268, trans193, term21, null), /*#__PURE__*/makeState(269, trans194)];
var $initial = [/*#__PURE__*/makeTransition(marks0, accept177)];

/**
 * Join combines two traversals, returning a mapper which is the result of first
 * applying `a` and then applying `b`.
 */
function join(a, b) {
  return base => b(a(base));
}
/**
 * Map returns a new mapper which will the inner mappe to each element of the array.
 */


function map(inner) {
  return base => ({
    type: 'Map',
    base,
    expr: inner({
      type: 'This'
    })
  });
}

function flatMap(inner) {
  return base => ({
    type: 'FlatMap',
    base,
    expr: inner({
      type: 'This'
    })
  });
}

function traverseArray(build, right) {
  if (!right) {
    return {
      type: 'a-a',
      build: build
    };
  }

  switch (right.type) {
    case 'a-a':
      return {
        type: 'a-a',
        build: join(build, right.build)
      };

    case 'a-b':
      return {
        type: 'a-b',
        build: join(build, right.build)
      };

    case 'b-b':
      return {
        type: 'a-a',
        build: join(build, map(right.build))
      };

    case 'b-a':
      return {
        type: 'a-a',
        build: join(build, flatMap(right.build))
      };

    default:
      throw new Error("unknown type: " + right.type);
  }
}
function traversePlain(mapper, right) {
  if (!right) {
    return {
      type: 'b-b',
      build: mapper
    };
  }

  switch (right.type) {
    case 'a-a':
    case 'b-a':
      return {
        type: 'b-a',
        build: join(mapper, right.build)
      };

    case 'a-b':
    case 'b-b':
      return {
        type: 'b-b',
        build: join(mapper, right.build)
      };

    default:
      throw new Error("unknown type: " + right.type);
  }
}
function traverseElement(mapper, right) {
  if (!right) {
    return {
      type: 'a-b',
      build: mapper
    };
  }

  switch (right.type) {
    case 'a-a':
    case 'b-a':
      return {
        type: 'a-a',
        build: join(mapper, right.build)
      };

    case 'a-b':
    case 'b-b':
      return {
        type: 'a-b',
        build: join(mapper, right.build)
      };

    default:
      throw new Error("unknown type: " + right.type);
  }
}
function traverseProjection(mapper, right) {
  if (!right) {
    return {
      type: 'b-b',
      build: mapper
    };
  }

  switch (right.type) {
    case 'a-a':
      return {
        type: 'a-a',
        build: join(map(mapper), right.build)
      };

    case 'a-b':
      return {
        type: 'a-b',
        build: join(map(mapper), right.build)
      };

    case 'b-a':
      return {
        type: 'b-a',
        build: join(mapper, right.build)
      };

    case 'b-b':
      return {
        type: 'b-b',
        build: join(mapper, right.build)
      };

    default:
      throw new Error("unknown type: " + right.type);
  }
}

var isEqual = equality;

function equality(a, b) {
  if (a.type === 'string' && b.type === 'string' || a.type === 'boolean' && b.type === 'boolean' || a.type === 'null' && b.type === 'null' || a.type === 'number' && b.type === 'number') {
    return a.data === b.data;
  }

  if (a.type === 'datetime' && b.type === 'datetime') {
    return a.data.equals(b.data);
  }

  return false;
}

var operators = {
  '==': function eq(left, right) {
    return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE;
  },
  '!=': function neq(left, right) {
    return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE;
  },
  '>': function gt(left, right) {
    if (left.type === 'stream' || right.type === 'stream') return NULL_VALUE;
    var result = partialCompare(left.data, right.data);

    if (result === null) {
      return NULL_VALUE;
    }

    return result > 0 ? TRUE_VALUE : FALSE_VALUE;
  },
  '>=': function gte(left, right) {
    if (left.type === 'stream' || right.type === 'stream') return NULL_VALUE;
    var result = partialCompare(left.data, right.data);

    if (result === null) {
      return NULL_VALUE;
    }

    return result >= 0 ? TRUE_VALUE : FALSE_VALUE;
  },
  '<': function lt(left, right) {
    if (left.type === 'stream' || right.type === 'stream') return NULL_VALUE;
    var result = partialCompare(left.data, right.data);

    if (result === null) {
      return NULL_VALUE;
    }

    return result < 0 ? TRUE_VALUE : FALSE_VALUE;
  },
  '<=': function lte(left, right) {
    if (left.type === 'stream' || right.type === 'stream') return NULL_VALUE;
    var result = partialCompare(left.data, right.data);

    if (result === null) {
      return NULL_VALUE;
    }

    return result <= 0 ? TRUE_VALUE : FALSE_VALUE;
  },
  // eslint-disable-next-line func-name-matching
  in: /*#__PURE__*/function () {
    var _inop = /*#__PURE__*/_asyncToGenerator(function* (left, right) {
      if (right.type === 'path') {
        if (left.type !== 'string') {
          return NULL_VALUE;
        }

        return right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE;
      }

      if (right.isArray()) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(right), _step, _value; _step = yield _iterator.next(), _iteratorNormalCompletion = _step.done, _value = yield _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            var b = _value;

            if (isEqual(left, b)) {
              return TRUE_VALUE;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return FALSE_VALUE;
      }

      return NULL_VALUE;
    });

    function inop(_x, _x2) {
      return _inop.apply(this, arguments);
    }

    return inop;
  }(),
  match: /*#__PURE__*/function () {
    var _match = /*#__PURE__*/_asyncToGenerator(function* (left, right) {
      var tokens = [];
      var patterns = [];
      yield gatherText(left, part => {
        tokens = tokens.concat(matchTokenize(part));
      });
      var didSucceed = yield gatherText(right, part => {
        patterns = patterns.concat(matchAnalyzePattern(part));
      });

      if (!didSucceed) {
        return FALSE_VALUE;
      }

      var matched = matchText(tokens, patterns);
      return matched ? TRUE_VALUE : FALSE_VALUE;
    });

    function match(_x3, _x4) {
      return _match.apply(this, arguments);
    }

    return match;
  }(),
  '+': function plus(left, right) {
    if (left.type === 'datetime' && right.type === 'number') {
      return fromDateTime(left.data.add(right.data));
    }

    if (left.type === 'number' && right.type === 'number') {
      return fromNumber(left.data + right.data);
    }

    if (left.type === 'string' && right.type === 'string') {
      return fromString(left.data + right.data);
    }

    if (left.type === 'object' && right.type === 'object') {
      return fromJS(_extends({}, left.data, right.data));
    }

    if (left.type === 'array' && right.type === 'array') {
      return fromJS(left.data.concat(right.data));
    }

    if (left.isArray() && right.isArray()) {
      return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;

        var _iteratorError2;

        try {
          for (var _iterator2 = _asyncIterator(left), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
            var val = _value2;
            yield val;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              yield _awaitAsyncGenerator(_iterator2.return());
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;

        var _iteratorError3;

        try {
          for (var _iterator3 = _asyncIterator(right), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
            var _val = _value3;
            yield _val;
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              yield _awaitAsyncGenerator(_iterator3.return());
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }));
    }

    return NULL_VALUE;
  },
  '-': function minus(left, right) {
    if (left.type === 'datetime' && right.type === 'number') {
      return fromDateTime(left.data.add(-right.data));
    }

    if (left.type === 'datetime' && right.type === 'datetime') {
      return fromNumber(left.data.difference(right.data));
    }

    if (left.type === 'number' && right.type === 'number') {
      return fromNumber(left.data - right.data);
    }

    return NULL_VALUE;
  },
  '*': /*#__PURE__*/numericOperator((a, b) => a * b),
  '/': /*#__PURE__*/numericOperator((a, b) => a / b),
  '%': /*#__PURE__*/numericOperator((a, b) => a % b),
  '**': /*#__PURE__*/numericOperator((a, b) => Math.pow(a, b))
};

function numericOperator(impl) {
  return function (left, right) {
    if (left.type === 'number' && right.type === 'number') {
      var result = impl(left.data, right.data);
      return fromNumber(result);
    }

    return NULL_VALUE;
  };
}

class Scope {
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  constructor(params, source, value, parent) {
    this.isHidden = false;
    this.params = params;
    this.source = source;
    this.value = value;
    this.parent = parent;
    this.timestamp = parent ? parent.timestamp : new Date().toISOString();
  }

  createNested(value) {
    if (this.isHidden) {
      return new Scope(this.params, this.source, value, this.parent);
    }

    return new Scope(this.params, this.source, value, this);
  }

  createHidden(value) {
    var result = this.createNested(value);
    result.isHidden = true;
    return result;
  }

}

function evaluate(node, scope, execute) {
  if (execute === void 0) {
    execute = evaluate;
  }

  var func = EXECUTORS[node.type];
  return func(node, scope, execute);
}
/**
 * Applies the function to a value, but tries to avoid creating unnecessary promises.
 */

function promiselessApply(value, cb) {
  if ('then' in value) {
    return value.then(cb);
  }

  return cb(value);
}

var EXECUTORS = {
  This(_, scope) {
    return scope.value;
  },

  Everything(_, scope) {
    return scope.source;
  },

  Parameter(_ref5, scope) {
    var name = _ref5.name;
    return fromJS(scope.params[name]);
  },

  Parent(_ref6, scope) {
    var n = _ref6.n;
    var current = scope;

    for (var i = 0; i < n; i++) {
      if (!current.parent) {
        return NULL_VALUE;
      }

      current = current.parent;
    }

    return current.value;
  },

  OpCall(_ref7, scope, execute) {
    var op = _ref7.op,
        left = _ref7.left,
        right = _ref7.right;
    var func = operators[op];

    if (!func) {
      throw new Error("Unknown operator: " + op);
    }

    var leftValue = execute(left, scope);
    var rightValue = execute(right, scope); // Avoid uneccesary promises
    // This is required for constant evaluation to work correctly.

    if ('then' in leftValue || 'then' in rightValue) {
      return _asyncToGenerator(function* () {
        return func(yield leftValue, yield rightValue);
      })();
    }

    return func(leftValue, rightValue);
  },

  Select(_ref9, scope, execute) {
    return _asyncToGenerator(function* () {
      var alternatives = _ref9.alternatives,
          fallback = _ref9.fallback;

      for (var _iterator7 = _createForOfIteratorHelperLoose(alternatives), _step7; !(_step7 = _iterator7()).done;) {
        var alt = _step7.value;
        var altCond = yield execute(alt.condition, scope);

        if (altCond.type === 'boolean' && altCond.data === true) {
          return execute(alt.value, scope);
        }
      }

      if (fallback) {
        return execute(fallback, scope);
      }

      return NULL_VALUE;
    })();
  },

  InRange(_ref10, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref10.base,
          left = _ref10.left,
          right = _ref10.right,
          isInclusive = _ref10.isInclusive;
      var value = yield execute(base, scope);
      var leftValue = yield execute(left, scope);
      var rightValue = yield execute(right, scope);
      var leftCmp = partialCompare(yield value.get(), yield leftValue.get());

      if (leftCmp === null) {
        return NULL_VALUE;
      }

      var rightCmp = partialCompare(yield value.get(), yield rightValue.get());

      if (rightCmp === null) {
        return NULL_VALUE;
      }

      if (isInclusive) {
        return leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE;
      }

      return leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE;
    })();
  },

  Filter(_ref11, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref11.base,
          expr = _ref11.expr;
      var baseValue = yield execute(base, scope);

      if (!baseValue.isArray()) {
        return NULL_VALUE;
      }

      return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(baseValue), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            var elem = _value;
            var newScope = scope.createNested(elem);
            var exprValue = yield _awaitAsyncGenerator(execute(expr, newScope));

            if (exprValue.type === 'boolean' && exprValue.data === true) {
              yield elem;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }));
    })();
  },

  Projection(_ref12, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref12.base,
          expr = _ref12.expr;
      var baseValue = yield execute(base, scope);

      if (baseValue.type !== 'object') {
        return NULL_VALUE;
      }

      var newScope = scope.createNested(baseValue);
      return execute(expr, newScope);
    })();
  },

  FuncCall(_ref13, scope, execute) {
    var func = _ref13.func,
        args = _ref13.args;
    return func(args, scope, execute);
  },

  PipeFuncCall(_ref14, scope, execute) {
    return _asyncToGenerator(function* () {
      var func = _ref14.func,
          base = _ref14.base,
          args = _ref14.args;
      var baseValue = yield execute(base, scope);
      return func(baseValue, args, scope, execute);
    })();
  },

  AccessAttribute(_ref15, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref15.base,
          name = _ref15.name;
      var value = scope.value;

      if (base) {
        value = yield execute(base, scope);
      }

      if (value.type === 'object') {
        if (value.data.hasOwnProperty(name)) {
          return fromJS(value.data[name]);
        }
      }

      return NULL_VALUE;
    })();
  },

  AccessElement(_ref16, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref16.base,
          index = _ref16.index;
      var baseValue = yield execute(base, scope);

      if (!baseValue.isArray()) {
        return NULL_VALUE;
      }

      var data = yield baseValue.get();
      var finalIndex = index < 0 ? index + data.length : index;
      return fromJS(data[finalIndex]);
    })();
  },

  Slice(_ref17, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref17.base,
          left = _ref17.left,
          right = _ref17.right,
          isInclusive = _ref17.isInclusive;
      var baseValue = yield execute(base, scope);

      if (!baseValue.isArray()) {
        return NULL_VALUE;
      } // OPT: Here we can optimize when either indices are >= 0


      var array = yield baseValue.get();
      var leftIdx = left;
      var rightIdx = right; // Handle negative index

      if (leftIdx < 0) {
        leftIdx = array.length + leftIdx;
      }

      if (rightIdx < 0) {
        rightIdx = array.length + rightIdx;
      } // Convert from inclusive to exclusive index


      if (isInclusive) {
        rightIdx++;
      }

      if (leftIdx < 0) {
        leftIdx = 0;
      }

      if (rightIdx < 0) {
        rightIdx = 0;
      } // Note: At this point the indices might point out-of-bound, but
      // .slice handles this correctly.


      return fromJS(array.slice(leftIdx, rightIdx));
    })();
  },

  Deref(_ref18, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref18.base;
      var value = yield execute(base, scope);

      if (!scope.source.isArray()) {
        return NULL_VALUE;
      }

      if (value.type !== 'object') {
        return NULL_VALUE;
      }

      var id = value.data._ref;

      if (typeof id !== 'string') {
        return NULL_VALUE;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;

      var _iteratorError2;

      try {
        for (var _iterator2 = _asyncIterator(scope.source), _step2, _value2; _step2 = yield _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
          var doc = _value2;

          if (doc.type === 'object' && id === doc.data._id) {
            return doc;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            yield _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return NULL_VALUE;
    })();
  },

  Value(_ref19) {
    var value = _ref19.value;
    return fromJS(value);
  },

  Group(_ref20, scope, execute) {
    var base = _ref20.base;
    return execute(base, scope);
  },

  Object(_ref21, scope, execute) {
    return _asyncToGenerator(function* () {
      var attributes = _ref21.attributes;
      var result = {};

      for (var _iterator8 = _createForOfIteratorHelperLoose(attributes), _step8; !(_step8 = _iterator8()).done;) {
        var attr = _step8.value;
        var attrType = attr.type;

        switch (attr.type) {
          case 'ObjectAttributeValue':
            {
              var value = yield execute(attr.value, scope);
              result[attr.name] = yield value.get();
              break;
            }

          case 'ObjectConditionalSplat':
            {
              var cond = yield execute(attr.condition, scope);

              if (cond.type !== 'boolean' || cond.data === false) {
                continue;
              }

              var _value7 = yield execute(attr.value, scope);

              if (_value7.type === 'object') {
                Object.assign(result, _value7.data);
              }

              break;
            }

          case 'ObjectSplat':
            {
              var _value8 = yield execute(attr.value, scope);

              if (_value8.type === 'object') {
                Object.assign(result, _value8.data);
              }

              break;
            }

          default:
            throw new Error("Unknown node type: " + attrType);
        }
      }

      return fromJS(result);
    })();
  },

  Array(_ref22, scope, execute) {
    var elements = _ref22.elements;
    return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {
      for (var _iterator9 = _createForOfIteratorHelperLoose(elements), _step9; !(_step9 = _iterator9()).done;) {
        var element = _step9.value;
        var value = yield _awaitAsyncGenerator(execute(element.value, scope));

        if (element.isSplat) {
          if (value.isArray()) {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;

            var _iteratorError3;

            try {
              for (var _iterator3 = _asyncIterator(value), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
                var v = _value3;
                yield v;
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                  yield _awaitAsyncGenerator(_iterator3.return());
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          }
        } else {
          yield value;
        }
      }
    }));
  },

  Or(_ref23, scope, execute) {
    return _asyncToGenerator(function* () {
      var left = _ref23.left,
          right = _ref23.right;
      var leftValue = yield execute(left, scope);
      var rightValue = yield execute(right, scope);

      if (leftValue.type === 'boolean') {
        if (leftValue.data === true) {
          return TRUE_VALUE;
        }
      }

      if (rightValue.type === 'boolean') {
        if (rightValue.data === true) {
          return TRUE_VALUE;
        }
      }

      if (leftValue.type !== 'boolean' || rightValue.type !== 'boolean') {
        return NULL_VALUE;
      }

      return FALSE_VALUE;
    })();
  },

  And(_ref24, scope, execute) {
    return _asyncToGenerator(function* () {
      var left = _ref24.left,
          right = _ref24.right;
      var leftValue = yield execute(left, scope);
      var rightValue = yield execute(right, scope);

      if (leftValue.type === 'boolean') {
        if (leftValue.data === false) {
          return FALSE_VALUE;
        }
      }

      if (rightValue.type === 'boolean') {
        if (rightValue.data === false) {
          return FALSE_VALUE;
        }
      }

      if (leftValue.type !== 'boolean' || rightValue.type !== 'boolean') {
        return NULL_VALUE;
      }

      return TRUE_VALUE;
    })();
  },

  Not(_ref25, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref25.base;
      var value = yield execute(base, scope);

      if (value.type !== 'boolean') {
        return NULL_VALUE;
      }

      return value.data ? FALSE_VALUE : TRUE_VALUE;
    })();
  },

  Neg(_ref26, scope, execute) {
    var base = _ref26.base;
    return promiselessApply(execute(base, scope), value => {
      if (value.type !== 'number') {
        return NULL_VALUE;
      }

      return fromNumber(-value.data);
    });
  },

  Pos(_ref27, scope, execute) {
    var base = _ref27.base;
    return promiselessApply(execute(base, scope), value => {
      if (value.type !== 'number') {
        return NULL_VALUE;
      }

      return fromNumber(value.data);
    });
  },

  Asc() {
    return NULL_VALUE;
  },

  Desc() {
    return NULL_VALUE;
  },

  ArrayCoerce(_ref28, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref28.base;
      var value = yield execute(base, scope);
      return value.isArray() ? value : NULL_VALUE;
    })();
  },

  Map(_ref29, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref29.base,
          expr = _ref29.expr;
      var value = yield execute(base, scope);

      if (!value.isArray()) {
        return NULL_VALUE;
      }

      return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;

        var _iteratorError4;

        try {
          for (var _iterator4 = _asyncIterator(value), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
            var elem = _value4;
            var newScope = scope.createHidden(elem);
            yield execute(expr, newScope);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              yield _awaitAsyncGenerator(_iterator4.return());
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }));
    })();
  },

  FlatMap(_ref30, scope, execute) {
    return _asyncToGenerator(function* () {
      var base = _ref30.base,
          expr = _ref30.expr;
      var value = yield execute(base, scope);

      if (!value.isArray()) {
        return NULL_VALUE;
      }

      return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator(function* () {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;

        var _iteratorError5;

        try {
          for (var _iterator5 = _asyncIterator(value), _step5, _value5; _step5 = yield _awaitAsyncGenerator(_iterator5.next()), _iteratorNormalCompletion5 = _step5.done, _value5 = yield _awaitAsyncGenerator(_step5.value), !_iteratorNormalCompletion5; _iteratorNormalCompletion5 = true) {
            var elem = _value5;
            var newScope = scope.createHidden(elem);
            var innerValue = yield _awaitAsyncGenerator(execute(expr, newScope));

            if (innerValue.isArray()) {
              var _iteratorNormalCompletion6 = true;
              var _didIteratorError6 = false;

              var _iteratorError6;

              try {
                for (var _iterator6 = _asyncIterator(innerValue), _step6, _value6; _step6 = yield _awaitAsyncGenerator(_iterator6.next()), _iteratorNormalCompletion6 = _step6.done, _value6 = yield _awaitAsyncGenerator(_step6.value), !_iteratorNormalCompletion6; _iteratorNormalCompletion6 = true) {
                  var inner = _value6;
                  yield inner;
                }
              } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
                    yield _awaitAsyncGenerator(_iterator6.return());
                  }
                } finally {
                  if (_didIteratorError6) {
                    throw _iteratorError6;
                  }
                }
              }
            } else {
              yield innerValue;
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
              yield _awaitAsyncGenerator(_iterator5.return());
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }));
    })();
  }

};
/**
 * Evaluates a query.
 */

function evaluateQuery(tree, options) {
  if (options === void 0) {
    options = {};
  }

  var root = fromJS(options.root);
  var dataset = fromJS(options.dataset);

  var params = _extends({}, options.params);

  var scope = new Scope(params, dataset, root, null);
  return evaluate(tree, scope);
}

function canConstantEvaluate(node) {
  switch (node.type) {
    case 'Group':
    case 'Value':
    case 'Parameter':
    case 'Pos':
    case 'Neg':
      return true;

    case 'OpCall':
      switch (node.op) {
        case '+':
        case '-':
        case '*':
        case '/':
        case '%':
        case '**':
          return true;

        default:
          return false;
      }

    default:
      return false;
  }
}

var DUMMY_SCOPE = /*#__PURE__*/new Scope({}, NULL_VALUE, NULL_VALUE, null);

class ConstantEvaluateError extends Error {
  constructor() {
    super(...arguments);
    this.name = 'ConstantEvaluateError';
  }

}

function tryConstantEvaluate(node) {
  try {
    return constantEvaluate(node);
  } catch (err) {
    if (err.name === 'ConstantEvaluateError') {
      return null;
    }

    throw err;
  }
}

function constantEvaluate(node) {
  if (!canConstantEvaluate(node)) {
    throw new ConstantEvaluateError('cannot constant evaluate');
  }

  var value = evaluate(node, DUMMY_SCOPE, constantEvaluate);

  if ('then' in value) {
    throw new Error('BUG: constant evaluate should never return a promise');
  }

  return value;
}

var ESCAPE_SEQUENCE = {
  "'": "'",
  '"': '"',
  '\\': '\\',
  '/': '/',
  b: '\b',
  f: '\f',
  n: '\n',
  r: '\r',
  t: '\t'
};

function expandHex(str) {
  var charCode = parseInt(str, 16);
  return String.fromCharCode(charCode);
}

class GroqQueryError extends Error {
  constructor() {
    super(...arguments);
    this.name = 'GroqQueryError';
  }

}

var EXPR_BUILDER = {
  group(p) {
    var inner = p.process(EXPR_BUILDER);
    return {
      type: 'Group',
      base: inner
    };
  },

  everything() {
    return {
      type: 'Everything'
    };
  },

  this() {
    return {
      type: 'This'
    };
  },

  parent() {
    return {
      type: 'Parent',
      n: 1
    };
  },

  dblparent(p) {
    var next = p.process(EXPR_BUILDER);
    return {
      type: 'Parent',
      n: next.n + 1
    };
  },

  traverse(p) {
    var base = p.process(EXPR_BUILDER);
    var traversalList = [];

    while (p.getMark().name !== 'traversal_end') {
      traversalList.push(p.process(TRAVERSE_BUILDER));
    }

    p.shift();
    var traversal = null;

    for (var i = traversalList.length - 1; i >= 0; i--) {
      traversal = traversalList[i](traversal);
    }

    if (base.type === 'Everything' || base.type === 'Array' || base.type === 'PipeFuncCall') {
      traversal = traverseArray(val => val, traversal);
    }

    if (traversal === null) throw new Error('BUG: unexpected empty traversal');
    return traversal.build(base);
  },

  this_attr(p) {
    var name = p.processString();

    if (name === 'null') {
      return {
        type: 'Value',
        value: null
      };
    }

    if (name === 'true') {
      return {
        type: 'Value',
        value: true
      };
    }

    if (name === 'false') {
      return {
        type: 'Value',
        value: false
      };
    }

    return {
      type: 'AccessAttribute',
      name
    };
  },

  neg(p) {
    var base = p.process(EXPR_BUILDER);
    return {
      type: 'Neg',
      base
    };
  },

  pos(p) {
    var base = p.process(EXPR_BUILDER);
    return {
      type: 'Pos',
      base
    };
  },

  add(p) {
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'OpCall',
      op: '+',
      left,
      right
    };
  },

  sub(p) {
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'OpCall',
      op: '-',
      left,
      right
    };
  },

  mul(p) {
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'OpCall',
      op: '*',
      left,
      right
    };
  },

  div(p) {
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'OpCall',
      op: '/',
      left,
      right
    };
  },

  mod(p) {
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'OpCall',
      op: '%',
      left,
      right
    };
  },

  pow(p) {
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'OpCall',
      op: '**',
      left,
      right
    };
  },

  comp(p) {
    var left = p.process(EXPR_BUILDER);
    var op = p.processString();
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'OpCall',
      op: op,
      left: left,
      right: right
    };
  },

  in_range(p) {
    var base = p.process(EXPR_BUILDER);
    var isInclusive = p.getMark().name === 'inc_range';
    p.shift();
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'InRange',
      base,
      left,
      right,
      isInclusive
    };
  },

  str(p) {
    var value = ''; // eslint-disable-next-line no-labels

    loop: while (p.hasMark()) {
      var mark = p.getMark();

      switch (mark.name) {
        case 'str_end':
          value += p.processStringEnd(); // eslint-disable-next-line no-labels

          break loop;

        case 'str_pause':
          value += p.processStringEnd();
          break;

        case 'str_start':
          p.shift();
          break;

        case 'single_escape':
          {
            var char = p.slice(1);
            p.shift();
            value += ESCAPE_SEQUENCE[char];
            break;
          }

        case 'unicode_hex':
          p.shift();
          value += expandHex(p.processStringEnd());
          break;

        default:
          throw new Error("unexpected mark: " + mark.name);
      }
    }

    return {
      type: 'Value',
      value
    };
  },

  integer(p) {
    var strValue = p.processStringEnd();
    return {
      type: 'Value',
      value: Number(strValue)
    };
  },

  float(p) {
    var strValue = p.processStringEnd();
    return {
      type: 'Value',
      value: Number(strValue)
    };
  },

  sci(p) {
    var strValue = p.processStringEnd();
    return {
      type: 'Value',
      value: Number(strValue)
    };
  },

  object(p) {
    var attributes = [];

    while (p.getMark().name !== 'object_end') {
      attributes.push(p.process(OBJECT_BUILDER));
    }

    p.shift();
    return {
      type: 'Object',
      attributes
    };
  },

  array(p) {
    var elements = [];

    while (p.getMark().name !== 'array_end') {
      var isSplat = false;

      if (p.getMark().name === 'array_splat') {
        isSplat = true;
        p.shift();
      }

      var value = p.process(EXPR_BUILDER);
      elements.push({
        type: 'ArrayElement',
        value,
        isSplat
      });
    }

    p.shift();
    return {
      type: 'Array',
      elements: elements
    };
  },

  func_call(p) {
    var namespace = 'global';

    if (p.getMark().name === 'namespace') {
      p.shift();
      namespace = p.processString();
    }

    var name = p.processString();

    if (namespace === 'global' && name === 'select') {
      var result = {
        type: 'Select',
        alternatives: []
      };

      while (p.getMark().name !== 'func_args_end') {
        if (p.getMark().name === 'pair') {
          if (result.fallback) throw new GroqQueryError("unexpected argument to select()");
          p.shift();
          var condition = p.process(EXPR_BUILDER);
          var value = p.process(EXPR_BUILDER);
          result.alternatives.push({
            type: 'SelectAlternative',
            condition,
            value
          });
        } else {
          if (result.fallback) throw new GroqQueryError("unexpected argument to select()");

          var _value = p.process(EXPR_BUILDER);

          result.fallback = _value;
        }
      }

      p.shift();
      return result;
    }

    var args = [];

    while (p.getMark().name !== 'func_args_end') {
      args.push(p.process(EXPR_BUILDER));
    }

    p.shift();
    if (namespace === 'global' && name === 'boost' && !p.allowBoost) throw new GroqQueryError('unexpected boost');
    var funcs = namespaces[namespace];

    if (!funcs) {
      throw new GroqQueryError("Undefined namespace: " + namespace);
    }

    var func = funcs[name];

    if (!func) {
      throw new GroqQueryError("Undefined function: " + name);
    }

    if (func.arity !== undefined) {
      validateArity(name, func.arity, args.length);
    }

    return {
      type: 'FuncCall',
      func,
      name,
      args
    };
  },

  pipecall(p) {
    var base = p.process(EXPR_BUILDER);
    p.shift(); // Remove the func_call

    var namespace = 'global';

    if (p.getMark().name === 'namespace') {
      p.shift();
      namespace = p.processString();
    }

    if (namespace !== 'global') {
      throw new GroqQueryError("Undefined namespace: " + namespace);
    }

    var name = p.processString();
    var args = [];
    var oldAllowBoost = p.allowBoost;

    if (name === 'score') {
      // Only allow boost inside a score expression
      p.allowBoost = true;
    }

    for (;;) {
      var markName = p.getMark().name;

      if (markName === 'func_args_end') {
        break;
      }

      if (name === 'order') {
        if (markName === 'asc') {
          p.shift();
          args.push({
            type: 'Asc',
            base: p.process(EXPR_BUILDER)
          });
          continue;
        } else if (markName === 'desc') {
          p.shift();
          args.push({
            type: 'Desc',
            base: p.process(EXPR_BUILDER)
          });
          continue;
        }
      }

      args.push(p.process(EXPR_BUILDER));
    }

    p.shift();
    p.allowBoost = oldAllowBoost;
    var func = pipeFunctions[name];

    if (!func) {
      throw new GroqQueryError("Undefined pipe function: " + name);
    }

    if (func.arity) {
      validateArity(name, func.arity, args.length);
    }

    return {
      type: 'PipeFuncCall',
      func,
      base,
      name,
      args
    };
  },

  pair(p) {
    throw new GroqQueryError("unexpected =>");
  },

  and(p) {
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'And',
      left,
      right
    };
  },

  or(p) {
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    return {
      type: 'Or',
      left,
      right
    };
  },

  not(p) {
    var base = p.process(EXPR_BUILDER);
    return {
      type: 'Not',
      base
    };
  },

  asc(p) {
    throw new GroqQueryError('unexpected asc');
  },

  desc(p) {
    throw new GroqQueryError('unexpected desc');
  },

  param(p) {
    var name = p.processString();

    if (p.parseOptions.params && p.parseOptions.params.hasOwnProperty(name)) {
      return {
        type: 'Value',
        value: p.parseOptions.params[name]
      };
    }

    return {
      type: 'Parameter',
      name
    };
  }

};
var OBJECT_BUILDER = {
  object_expr(p) {
    if (p.getMark().name === 'pair') {
      p.shift();
      var condition = p.process(EXPR_BUILDER);

      var _value2 = p.process(EXPR_BUILDER);

      return {
        type: 'ObjectConditionalSplat',
        condition,
        value: _value2
      };
    }

    var value = p.process(EXPR_BUILDER);
    return {
      type: 'ObjectAttributeValue',
      name: extractPropertyKey(value),
      value
    };
  },

  object_pair(p) {
    var name = p.process(EXPR_BUILDER);
    if (name.type !== 'Value') throw new Error('name must be string');
    var value = p.process(EXPR_BUILDER);
    return {
      type: 'ObjectAttributeValue',
      name: name.value,
      value: value
    };
  },

  object_splat(p) {
    var value = p.process(EXPR_BUILDER);
    return {
      type: 'ObjectSplat',
      value
    };
  },

  object_splat_this() {
    return {
      type: 'ObjectSplat',
      value: {
        type: 'This'
      }
    };
  }

};
var TRAVERSE_BUILDER = {
  square_bracket(p) {
    var expr = p.process(EXPR_BUILDER);
    var value = tryConstantEvaluate(expr);

    if (value && value.type === 'number') {
      return right => traverseElement(base => ({
        type: 'AccessElement',
        base,
        index: value.data
      }), right);
    }

    if (value && value.type === 'string') {
      return right => traversePlain(base => ({
        type: 'AccessAttribute',
        base,
        name: value.data
      }), right);
    }

    return right => traverseArray(base => ({
      type: 'Filter',
      base,
      expr
    }), right);
  },

  slice(p) {
    var isInclusive = p.getMark().name === 'inc_range';
    p.shift();
    var left = p.process(EXPR_BUILDER);
    var right = p.process(EXPR_BUILDER);
    var leftValue = tryConstantEvaluate(left);
    var rightValue = tryConstantEvaluate(right);

    if (!leftValue || !rightValue || leftValue.type !== 'number' || rightValue.type !== 'number') {
      throw new GroqQueryError('slicing must use constant numbers');
    }

    return rhs => traverseArray(base => ({
      type: 'Slice',
      base,
      left: leftValue.data,
      right: rightValue.data,
      isInclusive
    }), rhs);
  },

  projection(p) {
    var obj = p.process(EXPR_BUILDER);
    return right => traverseProjection(base => ({
      type: 'Projection',
      base: base,
      expr: obj
    }), right);
  },

  attr_access(p) {
    var name = p.processString();
    return right => traversePlain(base => ({
      type: 'AccessAttribute',
      base,
      name
    }), right);
  },

  deref(p) {
    var attr = null;

    if (p.getMark().name === 'deref_attr') {
      p.shift();
      attr = p.processString();
    }

    var wrap = base => attr ? {
      type: 'AccessAttribute',
      base,
      name: attr
    } : base;

    return right => traversePlain(base => wrap({
      type: 'Deref',
      base
    }), right);
  },

  array_postfix(p) {
    return right => traverseArray(base => ({
      type: 'ArrayCoerce',
      base
    }), right);
  }

};

function extractPropertyKey(node) {
  if (node.type === 'AccessAttribute' && !node.base) {
    return node.name;
  }

  if (node.type === 'Deref' || node.type === 'Map' || node.type === 'Projection' || node.type === 'Slice' || node.type === 'Filter' || node.type === 'AccessElement' || node.type === 'ArrayCoerce') {
    return extractPropertyKey(node.base);
  }

  throw new GroqQueryError("Cannot determine property key for type: " + node.type);
}

function validateArity(name, arity, count) {
  if (typeof arity === 'number') {
    if (count !== arity) {
      throw new GroqQueryError("Incorrect number of arguments to function " + name + "(). Expected " + arity + ", got " + count + ".");
    }
  } else if (arity) {
    if (!arity(count)) {
      throw new GroqQueryError("Incorrect number of arguments to function " + name + "().");
    }
  }
}

class GroqSyntaxError extends Error {
  constructor(position) {
    super("Syntax error in GROQ query at position " + position);
    this.name = 'GroqSyntaxError';
    this.position = position;
  }

}
/**
 * Parses a GROQ query and returns a tree structure.
 */


function parse$1(input, options) {
  if (options === void 0) {
    options = {};
  }

  var result = parse(input);

  if (result.type === 'error') {
    throw new GroqSyntaxError(result.position);
  }

  var processor = new MarkProcessor(input, result.marks, options);
  return processor.process(EXPR_BUILDER);
}

export { evaluateQuery as evaluate, parse$1 as parse };
//# sourceMappingURL=groq-js.esm.js.map
