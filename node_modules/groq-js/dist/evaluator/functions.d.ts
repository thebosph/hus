import type { ExprNode } from '../nodeTypes';
import { Scope } from './scope';
import { Executor } from './types';
import { Value } from '../values';
declare type GroqFunctionArg = ExprNode;
declare type WithArity<T> = T & {
    arity?: GroqFunctionArity;
};
export declare type GroqFunctionArity = number | ((count: number) => boolean);
export declare type GroqFunction = (args: GroqFunctionArg[], scope: Scope, execute: Executor) => PromiseLike<Value>;
export declare type FunctionSet = Record<string, WithArity<GroqFunction> | undefined>;
export declare type NamespaceSet = Record<string, FunctionSet | undefined>;
export declare type GroqPipeFunction = (base: Value, args: ExprNode[], scope: Scope, execute: Executor) => PromiseLike<Value>;
export declare const pipeFunctions: {
    [key: string]: WithArity<GroqPipeFunction>;
};
export declare const namespaces: NamespaceSet;
export {};
