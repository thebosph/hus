{"version":3,"sources":["../../src/components/Editor.jsx"],"names":["Preview","markdown","gfm","defaultToolbarCommands","React","forwardRef","MarkdownEditor","props","ref","type","value","markers","presence","readOnly","options","useState","selectedTab","setSelectedTab","editedValue","setEditedValue","debouncedValue","useEffect","onChange","PatchEvent","from","saveImage","data","client","sanityClient","withConfig","apiVersion","success","result","assets","upload","then","doc","url","catch","description","title","Promise","resolve","writeButton","tabIndex","textarea"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport ReactMde from 'react-mde'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\n\nimport PatchEvent, {set, unset} from 'part:@sanity/form-builder/patch-event'\nimport sanityClient from 'part:@sanity/base/client'\nimport {FormField} from '@sanity/base/components'\n\nimport useDebounce from '../hooks/useDebounce'\n\nimport 'react-mde/lib/styles/css/react-mde-all.css?raw'\n\nconst Preview = ({markdown}) => {\n  return <ReactMarkdown plugins={[gfm]}>{markdown}</ReactMarkdown>\n}\n\nconst defaultToolbarCommands = [\n  ['header', 'bold', 'italic', 'strikethrough'],\n  ['link', 'quote', 'code'],\n  ['unordered-list', 'ordered-list', 'checked-list'],\n]\n\nexport default React.forwardRef(function MarkdownEditor(props, ref) {\n  const {type, value = '', markers, presence, readOnly} = props\n  const {options = {}} = type\n  const [selectedTab, setSelectedTab] = React.useState('write')\n  const [editedValue, setEditedValue] = React.useState(value)\n  const debouncedValue = useDebounce(editedValue, 100)\n\n  React.useEffect(() => {\n    setEditedValue(value)\n  }, [value])\n\n  React.useEffect(() => {\n    if (!debouncedValue && value) {\n      props.onChange(PatchEvent.from([unset()]))\n    } else if (debouncedValue !== value) {\n      props.onChange(PatchEvent.from([set(debouncedValue)]))\n    }\n  }, [debouncedValue])\n\n  const saveImage = async function* (data) {\n    const client = sanityClient.withConfig({apiVersion: '2021-03-25'})\n\n    let success = true\n    const result = await client.assets\n      .upload('image', data)\n      .then((doc) => `${doc.url}?w=450`)\n      .catch(() => {\n        success = false\n        return `Error: Could not upload file. Only images are supported.`\n      })\n\n    yield result\n    return success\n  }\n\n  return (\n    <FormField\n      description={type.description} // Creates description from schema\n      title={type.title} // Creates label from schema title\n      __unstable_markers={markers} // Handles all markers including validation\n      __unstable_presence={presence} // Handles presence avatars\n    >\n      <ReactMde\n        toolbarCommands={options['toolbar'] || defaultToolbarCommands}\n        value={editedValue}\n        onChange={setEditedValue}\n        selectedTab={selectedTab}\n        onTabChange={setSelectedTab}\n        readOnly={readOnly}\n        generateMarkdownPreview={(markdown) => Promise.resolve(<Preview markdown={markdown} />)}\n        childProps={{\n          writeButton: {\n            tabIndex: -1,\n          },\n        }}\n        refs={{textarea: ref}}\n        paste={{saveImage}}\n      />\n    </FormField>\n  )\n})\n"],"file":"Editor.js"}